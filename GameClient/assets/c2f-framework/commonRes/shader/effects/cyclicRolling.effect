// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        moveSpeed: {value: 0.2}
        anchorX: {value: 0.5}
        showWidth: {value: 0.5}
        curTick: {value: 1.0}
        
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif


  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;    
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  #include <cc-global>
  #include <cc-local>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif
  
  #if USE_DYNAMIC
  uniform global{
    float moveSpeed;
    float anchorX;
    float showWidth;
    float curTick;
  };
  #endif


  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    vec4 a_color = v_color;

  
    #if USE_TEXTURE
        vec2 uv = v_uv0;

        #if USE_DYNAMIC  
            //横向匀速滚动
            //uv.x =  (sin( cc_time.x)/2.0)  + uv.x ;            
            if (showWidth < 1.0) {
              //左侧显示起始位置
              float showPosL = (1.0-showWidth) * anchorX;
              //右侧显示结束位置
              float showPosR = showPosL + showWidth;
              //偏移位置(初始位置向后偏移0.1)              
              float fixOff = 0.1;
              //移动速度, 所有移动速率保持一致
              float realSpeed = (1.0-showWidth) / 3.0;
              //float offset = mod(cc_time.x * 0.2 / moveSpeed , 1.0) - (showPosL + fixOff);
              float offset = mod(curTick * 0.2 / moveSpeed , 1.0) - (showPosL + fixOff);
              uv.x = uv.x + offset;
              if (uv.x < showPosL + offset || uv.x > showPosR + offset || uv.x > 1.0 || uv.x < 0.0) {
                a_color.a = 0.0;
              } 
            }           
          #endif
          o*=texture(texture,uv);
    #endif

    o *= a_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
