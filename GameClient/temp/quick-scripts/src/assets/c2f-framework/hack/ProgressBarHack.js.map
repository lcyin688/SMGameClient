{"version":3,"sources":["assets/c2f-framework/hack/ProgressBarHack.ts"],"names":[],"mappings":";;;;;;AAAA,IAAI,CAAC,SAAS,EAAE;IACZ,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,yBAAyB,CAAC,EAAE;QACtD,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,yBAAyB,CAAC,GAAG,IAAI,CAAC;QAG3D,uCAAuC;QACvC,IAAI,iBAAiB,GAAiB,IAAI,CAAC;QAC3C,IAAI,mBAAiB,GAA4B,IAAI,CAAC;QAEtD,wDAAwD;QACxD,IAAM,UAAU,GAAG,MAAM,CAAC,wBAAwB,CAAC,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QACzF,IAAI,UAAU,IAAI,OAAO,UAAU,CAAC,GAAG,KAAK,UAAU,EAAE;YACpD,iBAAiB,GAAG,UAAU,CAAC,GAAG,CAAC;SACtC;QACD,IAAI,UAAU,IAAI,OAAO,UAAU,CAAC,GAAG,KAAK,UAAU,EAAE;YACpD,mBAAiB,GAAG,UAAU,CAAC,GAAG,CAAC;SACtC;QAED,yBAAyB;QACzB,IAAM,cAAc,GAAG;YACnB,OAAO,IAAI,CAAC,UAAU,CAAC;QAC3B,CAAC,CAAC;QAEF,IAAM,cAAc,GAAG,UAAU,KAAa;YAC1C,IAAM,QAAQ,GAAG,KAAK,CAAC;YACvB,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,IAAI,CAAC,IAAI,KAAK,IAAI,CAAC,EAAE;gBACvD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;aAC/C;iBAAM;gBACH,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;gBAC3B,OAAO,CAAC,KAAK,CAAC,iCAAiC,EAAE,KAAK,CAAC,CAAC;aAC3D;YACD,6BAA6B;YAC7B,mBAAiB,IAAI,mBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC7D,CAAC,CAAC;QAEF,oDAAoD;QACpD,MAAM,CAAC,cAAc,CAAC,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,EAAE;YACxD,GAAG,EAAE,cAAc;YACnB,GAAG,EAAE,cAAc;YACnB,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI,CAAC,sBAAsB;SAC5C,CAAC,CAAC;KACN;CACJ","file":"","sourceRoot":"/","sourcesContent":["if (!CC_EDITOR) {\n    if (!cc.ProgressBar.prototype[\"__$CCProgressBarHack$__\"]) {\n        cc.ProgressBar.prototype[\"__$CCProgressBarHack$__\"] = true;\n\n\n        // 创建一个闭包来保存原始的 getter 和 setter（如果存在）  \n        let engineGetProgress: () => number = null;\n        let engineSetProgress: (value: number) => void = null;\n\n        // 检查 cc.ProgressBar.prototype 上是否已经存在 getter 或 setter  \n        const descriptor = Object.getOwnPropertyDescriptor(cc.ProgressBar.prototype, 'progress');\n        if (descriptor && typeof descriptor.get === 'function') {\n            engineGetProgress = descriptor.get;\n        }\n        if (descriptor && typeof descriptor.set === 'function') {\n            engineSetProgress = descriptor.set;\n        }\n\n        // 定义新的 getter 和 setter  \n        const newGetProgress = function () {\n            return this._progressV;\n        };\n\n        const newSetProgress = function (value: number) {\n            const minValue = 0.001;\n            if (typeof value === 'number' && value >= 0 && value <= 1) {\n                this._progressV = Math.max(minValue, value);\n            } else {\n                this._progressV = minValue;\n                console.error('ProgressBar hack：Invalid value:', value);\n            }\n            // 调用原始的 setter（如果存在）或直接设置值  \n            engineSetProgress && engineSetProgress.call(this, value);\n        };\n\n        // 使用 Object.defineProperty 来覆盖原有的 getter 和 setter  \n        Object.defineProperty(cc.ProgressBar.prototype, 'progress', {\n            get: newGetProgress,\n            set: newSetProgress,\n            enumerable: true, // 根据需要设置是否可枚举  \n            configurable: true // 保持可配置，以便将来可以移除或修改  \n        });\n    }\n}\n\ndeclare module cc {\n    interface ProgressBar {\n        _progressV: number;\n    }\n}\n\nexport { };"]}