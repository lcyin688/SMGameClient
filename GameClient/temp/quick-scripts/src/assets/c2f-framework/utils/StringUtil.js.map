{"version":3,"sources":["assets/c2f-framework/utils/StringUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/** 字符串工具 */\nclass StringUtil {\n    /** 获取一个唯一标识的字符串 */\n    static guid() {\n        let guid: string = \"\";\n        for (let i = 1; i <= 32; i++) {\n            let n = Math.floor(Math.random() * 16.0).toString(16);\n            guid += n;\n            if ((i == 8) || (i == 12) || (i == 16) || (i == 20))\n                guid += \"-\";\n        }\n        return guid;\n    }\n\n    /**\n     * 转美式计数字符串\n     * @param value 数字\n     * @example\n     * 123456789 = 123,456,789\n     */\n    static numberTotPermil(value: number): string {\n        return value.toLocaleString();\n    }\n\n    /** \n     * 转英文单位计数\n     * @param value 数字\n     * @param fixed 保留小数位数\n     * @example\n     * 12345 = 12.35K\n     */\n    static numberToThousand(value: number, fixed: number = 2): string {\n        var k = 1000;\n        var sizes = ['', 'K', 'M', 'G'];\n        if (value < k) {\n            return value.toString();\n        }\n        else {\n            var i = Math.floor(Math.log(value) / Math.log(k));\n            var r = ((value / Math.pow(k, i)));\n            return r.toFixed(fixed) + sizes[i];\n        }\n    }\n\n    /** \n     * 转中文单位计数\n     * @param value 数字\n     * @param fixed 保留小数位数\n     * @example\n     * 12345 = 1.23万\n     */\n    static numberToTenThousand(value: number, fixed: number = 2): string {\n        var k = 10000;\n        var sizes = ['', '万', '亿', '万亿'];\n        if (value < k) {\n            return value.toString();\n        }\n        else {\n            var i = Math.floor(Math.log(value) / Math.log(k));\n            return ((value / Math.pow(k, i))).toFixed(fixed) + sizes[i];\n        }\n    }\n\n    /**\n     * \",\" 分割字符串成数组\n     * @param str 字符串\n     */\n    static stringToArray1(str: string) {\n        if (str == \"\") {\n            return [];\n        }\n        return str.split(\",\");\n    }\n\n    /** \n     * \"|\" 分割字符串成数组 \n     * @param str 字符串\n     */\n    static stringToArray2(str: string) {\n        if (str == \"\") {\n            return [];\n        }\n        return str.split(\"|\");\n    }\n\n    /** \n     * \":\" 分割字符串成数组\n     * @param str 字符串\n     */\n    static stringToArray3(str: string) {\n        if (str == \"\") {\n            return [];\n        }\n        return str.split(\":\");\n    }\n\n    /** \n     * \";\" 分割字符串成数组 \n     * @param str 字符串\n     */\n    static stringToArray4(str: string) {\n        if (str == \"\") {\n            return [];\n        }\n        return str.split(\";\");\n    }\n\n    /**\n     * 字符串截取\n     * @param str     字符串\n     * @param n       截取长度\n     * @param showdot 是否把截取的部分用省略号代替\n     */\n    static sub(str: string, n: number, showdot: boolean = false) {\n        var r = /[^\\x00-\\xff]/g;\n        if (str.replace(r, \"mm\").length <= n) { return str; }\n        var m = Math.floor(n / 2);\n        for (var i = m; i < str.length; i++) {\n            if (str.substring(0, i).replace(r, \"mm\").length >= n) {\n                if (showdot) {\n                    return str.substring(0, i) + \"...\";\n                } else {\n                    return str.substring(0, i);\n                }\n            }\n        }\n        return str;\n    }\n\n    /**\n     * 计算字符串长度，中文算两个字节\n     * @param str 字符串\n     */\n    static stringLen(str: string) {\n        var realLength = 0, len = str.length, charCode = -1;\n        for (var i = 0; i < len; i++) {\n            charCode = str.charCodeAt(i);\n            if (charCode >= 0 && charCode <= 128)\n                realLength += 1;\n            else\n                realLength += 2;\n        }\n        return realLength;\n    }\n\n    /**\n     * 字符串格式化：xx{0}yy{1}zz中的占位用后面的参数替换\n     * @param str 字符串\n     */\n    static formatWords(str: string, params: string) {\n        if (!params || params.length <= 0) {\n            return str;\n        }\n        let fromUI = params == 'UIV_Null' ? true : false;\n        let arrPa = this.stringToArray2(params);\n        let result = str.replace(/\\{(\\w+)\\}/g, function (s, i) {\n            return fromUI ? \"\" : arrPa[i];\n        });\n        return result;\n    }\n\n    /**\n         * 根据参数返回格式化字符串\n         * @param text 源字符串\n         * @param option 用于格式化源字符串的数据，可以是键值对，也可以按顺序传参\n         * @example\n         * // 可使用以下两种调用方式，返回结果都是\"测试字符串111--abc...\"\n         * c2f.utils.date.formatWithObj(\"测试字符串%{a1}--%{a2}...\", {a1: 111, a2: \"abc\"});\n         * c2f.utils.date.formatWithObj(\"测试字符串%{a1}--%{a2}...\", 111, \"abc\");\n         */\n    static formatWithObj(text: string, ...option: [Record<string, string | number>] | Array<string | number>): string {\n        let result = text;\n        if (option.length === 1 && Object.prototype.toString.call(option[0]) === \"[object Object]\") {\n            // 参数为键值对\n            for (let arg in (option[0] as Record<string, string | number>)) {\n                if (option[0].hasOwnProperty(arg)) {\n                    let reg = new RegExp(`%{${arg}}`, \"g\");\n                    result = result.replace(reg, `${option[0][arg]}`);\n                }\n            }\n        } else {\n            // 参数为数组\n            option.forEach((value: any) => {\n                result = result.replace(/%\\{.*?\\}/, `${value}`);\n            });\n        }\n        return result;\n    }\n\n    /** 首字母大写 */\n    static uppercaseFirstLetter(text: string) {\n        return text.substring(0, 1).toUpperCase() + text.substring(1);\n    }\n\n    /** 首字母小写 */\n    static lowercaseFirstLetter(text: string) {\n        return text.substring(0, 1).toLowerCase() + text.substring(1);\n    }\n\n    /** 判断是否都是数字 */\n    static isAllDigits(str: string): boolean {\n        const regex = /^\\d+$/;\n        return regex.test(str);\n    }\n\n}\n\ndeclare global {\n    interface IUtil {\n        str: typeof StringUtil;\n    }\n}\nc2f.utils.str = StringUtil;\nexport { };"]}