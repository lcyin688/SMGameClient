{"version":3,"sources":["assets/c2f-framework/utils/MathUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/** 数学工具 */\nclass MathUtil {\n    /**\n     * 角度转弧度\n     */\n    static deg2Rad: number = Math.PI / 180;\n\n    /**\n     * 弧度转角度\n     */\n    static rad2Deg: number = 180 / Math.PI;\n\n    /**\n     * 获得随机方向\n     * @param x -1为左，1为右\n     * @returns \n     */\n    static sign(x: number) {\n        if (x > 0) {\n            return 1;\n        }\n        if (x < 0) {\n            return -1;\n        }\n        return 0;\n    }\n\n    /**\n     * 随时间变化进度值\n     * @param start 初始值\n     * @param end   结束值\n     * @param t     时间\n     */\n    static progress(start: number, end: number, t: number) {\n        return start + (end - start) * t;\n    }\n\n    /**\n     * 插值\n     * @param numStart 开始数值\n     * @param numEnd   结束数值\n     * @param t        时间\n     */\n    static lerp(numStart: number, numEnd: number, t: number): number {\n        if (t > 1) {\n            t = 1;\n        }\n        else if (t < 0) {\n            t = 0\n        }\n\n        return numStart * (1 - t) + (numEnd * t);\n    }\n\n    /**\n     * 角度插值\n     * @param angle1 角度1\n     * @param angle2 角度2\n     * @param t      时间\n     */\n    static lerpAngle(current: number, target: number, t: number): number {\n        current %= 360;\n        target %= 360;\n\n        var dAngle: number = target - current;\n\n        if (dAngle > 180) {\n            target = current - (360 - dAngle);\n        }\n        else if (dAngle < -180) {\n            target = current + (360 + dAngle);\n        }\n\n        return (MathUtil.lerp(current, target, t) % 360 + 360) % 360;\n    }\n\n    /**\n     * 按一定的速度从一个角度转向令一个角度\n     * @param current 当前角度\n     * @param target  目标角度\n     * @param speed   速度\n     */\n    static angleTowards(current: number, target: number, speed: number): number {\n        current %= 360;\n        target %= 360;\n\n        var dAngle: number = target - current;\n\n        if (dAngle > 180) {\n            target = current - (360 - dAngle);\n        }\n        else if (dAngle < -180) {\n            target = current + (360 + dAngle);\n        }\n\n        var dir = target - current;\n\n        if (speed > Math.abs(dir)) {\n            return target;\n        }\n\n        return ((current + speed * Math.sign(dir)) % 360 + 360) % 360;\n    }\n\n    /**\n     * 获取方位内值，超过时获取对应边界值\n     * @param value     值\n     * @param minLimit  最小值\n     * @param maxLimit  最大值\n     */\n    static clamp(value: number, minLimit: number, maxLimit: number) {\n        if (value < minLimit) {\n            return minLimit;\n        }\n\n        if (value > maxLimit) {\n            return maxLimit;\n        }\n\n        return value;\n    }\n\n    /**\n     * 获得一个值的概率\n     * @param value 值\n     */\n    static probability(value: number) {\n        return Math.random() < value;\n    }\n\n    /**\n     * 在范围内随机一个数\n     * @param value 值\n     */\n    static randRect(min: number, max: number) {\n        let value = Math.random() * (max - min) + min;\n        return value;\n    }\n\n    /**\n     * 在范围内随机一个整数\n     * @param value 值\n     */\n    static randRectInt(min: number, max: number) {\n        let value = Math.random() * (max - min) + min;\n        return value < 0 ? Math.ceil(value) : Math.floor(value);\n    }\n\n    /**\n     * 获取区间[min, max)的浮点数，传入1个参数则区间为[0, min)\n     */\n    static randFloat(min: number, max: number = undefined): number {\n        if (max === undefined) {\n            max = min;\n            min = 0;\n        }\n        return Math.random() * (max - min) + min;\n    }\n\n    /**\n     * 根据权重数组进行随机，返回结果下标\n     * @param weightArr 权重数组\n     * @returns 随机到的权重数组下标\n     */\n    static randWeightIdx(weightArr: number[]) {\n        let sum = 0;\n        for (let i = 0; i < weightArr.length; i++) {\n            sum += weightArr[i];\n        }\n        let randNum = this.randFloat(0, sum);\n        let curValue = 0\n        for (let i = 0; i < weightArr.length; i++) {\n            curValue += weightArr[i];\n            if (randNum < curValue) {\n                return i;\n            }\n        }\n        return weightArr.length - 1;\n    }\n\n    //%02d：\n    static prefixInteger(num: number, length: number) {\n        if (num < 10) {\n            return (Array(length).join('0') + num).slice(-length);\n        } else {\n            return num;\n        }\n    }\n\n    /**\n     * 将角度约束在 [0,360) 区间内\n     */\n    public static normalizeDegree(degree: number): number {\n        let result = degree % 360;\n        if (result < 0) {\n            result += 360;\n        }\n        return result;\n    }\n\n    /**\n     * 返回value是否在 [min, max] 区间内\n     * @param min \n     * @param max \n     * @param value\n     * @param includeEdge true(默认值): [min, max]; false: (min, max)\n     */\n    public static inRange(min: number, max: number, value: number, includeEdge: boolean = true): boolean {\n        return includeEdge ? value >= min && value <= max : value > min && value < max;\n    }\n}\n\ndeclare global {\n    interface IUtil {\n        math: typeof MathUtil;\n    }\n}\nc2f.utils.math = MathUtil;\nexport { };"]}