{"version":3,"sources":["assets/c2f-framework/utils/ArrayUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\n/** 数组工具 */\nclass ArrayUtil {\n    /**\n     * 数组去重，并创建一个新数组返回\n     * @param arr  源数组\n     */\n    static noRepeated(arr: any[]) {\n        if (arr && arr.length > 0) {\n            let res = [arr[0]];\n            for (var i = 1; i < arr.length; i++) {\n                var repeat = false;\n                for (var j = 0; j < res.length; j++) {\n                    if (arr[i] == res[j]) {\n                        repeat = true;\n                        break;\n                    }\n                }\n                if (!repeat) {\n                    res.push(arr[i]);\n                }\n            }\n            return res;\n        } else {\n            return arr;\n        }\n    }\n\n    /**\n     * 复制二维数组\n     * @param array 目标数组 \n     */\n    static copy2DArray(array: any[][]): any[][] {\n        let newArray: any[][] = [];\n        for (let i = 0; i < array.length; i++) {\n            newArray.push(array[i].concat());\n        }\n        return newArray;\n    }\n\n    /**\n     * Fisher-Yates Shuffle 随机置乱算法\n     * @param array 目标数组\n     */\n    static fisherYatesShuffle(array: any[]): any[] {\n        let count = array.length;\n        while (count) {\n            let index = Math.floor(Math.random() * count--);\n            let temp = array[count];\n            array[count] = array[index];\n            array[index] = temp;\n        }\n        return array;\n    }\n\n    /**\n     * 混淆数组\n     * @param array 目标数组\n     */\n    static confound(array: []): any[] {\n        let result = array.slice().sort(() => Math.random() - .5);\n        return result;\n    }\n\n    /**\n     * 数组扁平化\n     * @param array 目标数组\n     */\n    static flattening(array: any[]) {\n        for (; array.some(v => Array.isArray(v));) {    // 判断 array 中是否有数组\n            array = [].concat.apply([], array); // 压扁数组\n        }\n        return array;\n    }\n\n    /** 删除数组中指定项 */\n    static removeItem(array: any[], item: any) {\n        let temp = array.concat();\n        for (let i = 0; i < temp.length;) {\n            const value = temp[i];\n            if (item == value) {\n                temp.splice(i, 1);\n            } else {\n                i++;\n            }\n        }\n        return temp;\n    }\n\n    /**\n     * 合并数组\n     * @param array1 目标数组1\n     * @param array2 目标数组2\n     */\n    static combineArrays(array1: any[], array2: any[]): any[] {\n        let newArray = [...array1, ...array2];\n        return newArray;\n    }\n\n    /**\n     * 获取随机数组成员\n     * @param array 目标数组\n     */\n    static getRandomValueInArray(array: any[]): any {\n        let newArray = array[Math.floor(Math.random() * array.length)];\n        return newArray;\n    }\n\n    /**\n     * 将array中存在于match中的成员移除\n     * @param array \n     * @param match \n     */\n    static removeByArray(array: any[], match: any[]) {\n        let temp = array.concat();\n        for (let i = 0; i < temp.length;) {\n            let value = temp[i];\n            if (match.indexOf(value) >= 0) {\n                temp.splice(i, 1);\n            } else {\n                i++;\n            }\n        }\n        return temp;\n    }\n\n    /**\n     * 移除指定索引位置的数组元素。 此函数十分高效，但会改变数组的元素次序。\n     * @param array 数组。\n     * @param value 待移除元素。\n     */\n    static fastRemoveAt<T>(array: T[], index: number) {\n        const length = array.length;\n        if (index < 0 || index >= length) {\n            return;\n        }\n        array[index] = array[length - 1];\n        array.length = length - 1;\n    }\n\n    /**\n     * 移除首个指定的数组元素。判定元素相等时相当于于使用了 `Array.prototype.indexOf`。 此函数十分高效，但会改变数组的元素次序。\n     * @param array 数组。\n     * @param item 待移除元素。\n     */\n    static fastRemove<T>(array: T[], item: T) {\n        const length = array.length;\n        let index = array.indexOf(item);\n        if (index >= 0) {\n            array[index] = array[length - 1];\n            array.length = length - 1;\n        }\n    }\n\n    /** 判断两数字数组是否相同 */\n    static numArrIsEqual(arr1: number[], arr2: number[]): boolean {\n        if (arr1.length !== arr2.length) {\n            return false;\n        }\n        arr1.sort((a, b) => { return a - b });\n        arr2.sort((a, b) => { return a - b });\n        return arr1.every((value, index) => value === arr2[index]);\n    }\n}\n\ndeclare global {\n    interface IUtil {\n        arr: typeof ArrayUtil;\n    }\n}\nc2f.utils.arr = ArrayUtil;\nexport { };\n"]}