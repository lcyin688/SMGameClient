{"version":3,"sources":["assets/c2f-framework/utils/ImageUtil.ts"],"names":[],"mappings":";;;;;;AAAA;;GAEG;AACH;IAAA;IA2FA,CAAC;IA1FG;;;;;;;;;OASG;IACI,uBAAa,GAApB,UAAqB,OAAqB,EAAE,CAAS,EAAE,CAAS;QAC5D,IAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAChD,IAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAE,CAAC;QACrC,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;QAC7B,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;QAC/B,IAAM,KAAK,GAAG,OAAO,CAAC,iBAAiB,EAAG,CAAC;QAC3C,GAAG,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAC1D,IAAM,SAAS,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QACxE,IAAM,UAAU,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;QAC/D,IAAM,SAAS,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE,UAAU,GAAG,CAAC,CAAC,CAAC;QACnE,IAAM,KAAK,GAAG,IAAI,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;QACnF,KAAK,CAAC,MAAM,EAAE,CAAC;QACf,MAAM,CAAC,MAAM,EAAE,CAAC;QAChB,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACI,uBAAa,GAApB,UAAqB,GAAW,EAAE,QAAoC;QAClE,OAAO,IAAI,OAAO,CAAC,UAAA,GAAG;;YAClB,IAAI,OAAO,SAAG,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,0CAAG,CAAC,CAAC,CAAC;YAClD,YAAY;YACZ,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;gBAC7C,IAAM,QAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;gBAChD,IAAM,KAAG,GAAG,QAAM,CAAC,UAAU,CAAC,IAAI,CAAE,CAAC;gBACrC,IAAM,OAAK,GAAG,IAAI,KAAK,EAAE,CAAC;gBAC1B,OAAK,CAAC,GAAG,GAAG,GAAG,CAAC;gBAChB,OAAK,CAAC,MAAM,GAAG;oBACX,QAAM,CAAC,MAAM,GAAG,OAAK,CAAC,MAAM,CAAC;oBAC7B,QAAM,CAAC,KAAK,GAAG,OAAK,CAAC,KAAK,CAAC;oBAC3B,KAAG,CAAC,SAAS,CAAC,OAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC3B,OAAO,GAAG,OAAO,KAAK,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBAClE,IAAM,OAAO,GAAG,QAAM,CAAC,SAAS,CAAC,WAAS,OAAS,CAAC,CAAC;oBACrD,QAAQ,IAAI,QAAQ,CAAC,OAAO,CAAC,CAAC;oBAC9B,GAAG,CAAC,OAAO,CAAC,CAAC;oBACb,OAAK,CAAC,MAAM,EAAE,CAAC;oBACf,QAAM,CAAC,MAAM,EAAE,CAAC;gBACpB,CAAC,CAAA;aACJ;iBACI;gBACD,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;gBAChD,QAAQ,IAAI,QAAQ,CAAC,EAAE,CAAC,CAAC;gBACzB,GAAG,CAAC,EAAE,CAAC,CAAC;aACX;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,yBAAe,GAAtB,UAAuB,MAAc;QACjC,IAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC5C,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC;QACnB,IAAM,OAAO,GAAG,IAAI,EAAE,CAAC,SAAS,EAAE,CAAC;QACnC,YAAY;QACZ,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAC/B,KAAK,CAAC,MAAM,EAAE,CAAC;QACf,OAAO,OAAO,CAAC;IACnB,CAAC;IAED;;;OAGG;IACI,sBAAY,GAAnB,UAAoB,MAAc;QAC9B,IAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,YAAY;QACZ,IAAM,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACrC,IAAM,WAAW,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACjD,IAAM,UAAU,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;QAC/C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;SAC7C;QACD,OAAO,IAAI,IAAI,CAAC,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAClD,CAAC;IACL,gBAAC;AAAD,CA3FA,AA2FC,IAAA;AAOD,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC","file":"","sourceRoot":"/","sourcesContent":["/**\n * 图像工具\n */\nclass ImageUtil {\n    /**\n     * 获取纹理中指定像素的颜色，原点为左上角，从像素 (1, 1) 开始。\n     * @param texture 纹理\n     * @param x x 坐标\n     * @param y y 坐标\n     * @example\n    // 获取纹理左上角第一个像素的颜色\n    const color = ImageUtil.getPixelColor(texture, 1, 1);\n    cc.color(50, 100, 123, 255);\n     */\n    static getPixelColor(texture: cc.Texture2D, x: number, y: number): cc.Color {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d')!;\n        canvas.width = texture.width;\n        canvas.height = texture.height;\n        const image = texture.getHtmlElementObj()!;\n        ctx.drawImage(image, 0, 0, texture.width, texture.height);\n        const imageData = ctx.getImageData(0, 0, texture.width, texture.height);\n        const pixelIndex = ((y - 1) * texture.width * 4) + (x - 1) * 4;\n        const pixelData = imageData.data.slice(pixelIndex, pixelIndex + 4);\n        const color = new cc.Color(pixelData[0], pixelData[1], pixelData[2], pixelData[3]);\n        image.remove();\n        canvas.remove();\n        return color;\n    }\n\n    /**\n     * 将图像转为 Base64 字符（仅 png、jpg 或 jpeg 格式资源）（有问题）\n     * @param url 图像地址\n     * @param callback 完成回调\n     */\n    static imageToBase64(url: string, callback?: (dataURL: string) => void): Promise<string> {\n        return new Promise(res => {\n            let extname = /\\.png|\\.jpg|\\.jpeg/.exec(url)?.[0];\n            //@ts-ignore\n            if (['.png', '.jpg', '.jpeg'].includes(extname)) {\n                const canvas = document.createElement('canvas');\n                const ctx = canvas.getContext('2d')!;\n                const image = new Image();\n                image.src = url;\n                image.onload = () => {\n                    canvas.height = image.height;\n                    canvas.width = image.width;\n                    ctx.drawImage(image, 0, 0);\n                    extname = extname === '.jpg' ? 'jpeg' : extname!.replace('.', '');\n                    const dataURL = canvas.toDataURL(`image/${extname}`);\n                    callback && callback(dataURL);\n                    res(dataURL);\n                    image.remove();\n                    canvas.remove();\n                }\n            }\n            else {\n                console.warn('Not a jpg/jpeg or png resource!');\n                callback && callback(\"\");\n                res(\"\");\n            }\n        });\n    }\n\n    /**\n     * 将 Base64 字符转为 cc.Texture2D 资源（有问题）\n     * @param base64 Base64 字符\n     */\n    static base64ToTexture(base64: string): cc.Texture2D {\n        const image = document.createElement('img');\n        image.src = base64;\n        const texture = new cc.Texture2D();\n        //@ts-ignore\n        texture.initWithElement(image);\n        image.remove();\n        return texture;\n    }\n\n    /**\n     * 将 Base64 字符转为二进制数据（有问题）\n     * @param base64 Base64 字符\n     */\n    static base64ToBlob(base64: string): Blob {\n        const strings = base64.split(',');\n        //@ts-ignore\n        const type = /image\\/\\w+|;/.exec(strings[0])[0];\n        const data = window.atob(strings[1]);\n        const arrayBuffer = new ArrayBuffer(data.length);\n        const uint8Array = new Uint8Array(arrayBuffer);\n        for (let i = 0; i < data.length; i++) {\n            uint8Array[i] = data.charCodeAt(i) & 0xff;\n        }\n        return new Blob([uint8Array], { type: type });\n    }\n}\n\ndeclare global {\n    interface IUtil {\n        image: typeof ImageUtil;\n    }\n}\nc2f.utils.image = ImageUtil;\nexport { };\n"]}