{"version":3,"sources":["assets/c2f-framework/mvvm/VMLabel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import VMBase from './VMBase';\nimport { StringFormatFunction } from './StringFormat';\n\nconst { ccclass, property, menu, executeInEditMode } = cc._decorator;\n\nconst LABEL_TYPE = {\n    CC_LABEL: 'cc.Label',\n    CC_RICH_TEXT: 'cc.RichText',\n    CC_EDIT_BOX: 'cc.EditBox'\n}\n\n/**\n *  [VM-Label]\n *  专门处理 Label 相关 的组件，如 ccLabel,ccRichText,ccEditBox\n *  可以使用模板化的方式将数据写入,可以处理字符串格式等\n *  todo 加入stringFormat 可以解析转换常见的字符串格式\n */\n@ccclass\n@executeInEditMode\n@menu('ModelViewer/VM-Label(文本VM)')\nexport default class VMLabel extends VMBase {\n\n    @property({\n        visible: function () {\n            return this.templateMode === false;\n        }\n    })\n    watchPath: string = \"\";\n\n\n    @property({\n        //type:cc.Enum(LABEL_TYPE),\n        readonly: true\n    })\n    private labelType: string = LABEL_TYPE.CC_LABEL;\n\n    @property({\n        tooltip: '是否启用模板代码,只能在运行时之前设置,\\n将会动态解析模板语法 {{0}},并且自动设置监听的路径'\n    })\n    public templateMode: boolean = false;\n\n\n    //按照匹配参数顺序保存的 path 数组 （固定）\n    @property({\n        type: [cc.String],\n        visible: function () { return this.templateMode === true }\n    })\n    protected watchPathArr: string[] = [];\n\n    //按照路径参数顺序保存的 值的数组（固定）\n    protected templateValueArr: any[] = [];\n\n    //保存着字符模板格式的数组 (只会影响显示参数)\n    private templateFormatArr: string[] = [];\n\n    originText: string = null;\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onRestore() {\n        this.checkLabel();\n    }\n\n    onLoad() {\n        super.onLoad();\n        this.checkLabel();\n        if (!CC_EDITOR) {\n            if (this.templateMode) {\n                this.originText = this.getLabelValue();\n                this.parseTemplate();\n            }\n            this.onValueInit();\n        }\n    }\n\n    //解析模板 获取初始格式化字符串格式 的信息\n    parseTemplate() {\n        let regexAll = /\\{\\{(.+?)\\}\\}/g; //匹配： 所有的{{value}}\n        let regex = /\\{\\{(.+?)\\}\\}/;//匹配： {{value}} 中的 value\n        let res = this.originText.match(regexAll);//匹配结果数组\n        if (res == null) return;\n        for (let i = 0; i < res.length; i++) {\n            const e = res[i];\n            let arr = e.match(regex);\n            let matchName = arr[1];\n            //let paramIndex = parseInt(matchName)||0;\n            let matchInfo = matchName.split(':')[1] || '';\n            this.templateFormatArr[i] = matchInfo;\n        }\n        //监听对应的数值变化\n        //this.setMultPathEvent(true);\n    }\n\n    /**获取解析字符串模板后得到的值 */\n    getReplaceText() {\n        let regexAll = /\\{\\{(.+?)\\}\\}/g; //匹配： 所有的{{value}}\n        let regex = /\\{\\{(.+?)\\}\\}/;//匹配： {{value}} 中的 value\n        let res = this.originText.match(regexAll);//匹配结果数组 [{{value}}，{{value}}，{{value}}]\n        if (res == null) return '';//未匹配到文本\n        let str = this.originText;//原始字符串模板 \"name:{{0}} 或 name:{{0:fix2}}\"\n\n        for (let i = 0; i < res.length; i++) {\n            const e = res[i];\n            let getValue;\n            let arr = e.match(regex); //匹配到的数组 [{{value}}, value]\n            let indexNum = parseInt(arr[1] || '0') || 0; //取出数组的 value 元素 转换成整数\n            let format = this.templateFormatArr[i]; //格式化字符 的 配置参数\n            getValue = this.templateValueArr[indexNum];\n            str = str.replace(e, this.getValueFromFormat(getValue, format));//从路径缓存值获取数据\n        }\n        return str;\n    }\n\n    /** 格式化字符串 */\n    getValueFromFormat(value: number | string, format: string): string {\n        return StringFormatFunction.deal(value, format);\n    }\n\n    /**初始化获取数据 */\n    onValueInit() {\n        //更新信息\n        if (this.templateMode === false) {\n            this.setLabelValue(this.VM.getValue(this.watchPath)); //\n        } else {\n            let max = this.watchPathArr.length;\n            for (let i = 0; i < max; i++) {\n                this.templateValueArr[i] = this.VM.getValue(this.watchPathArr[i], '?');\n            }\n            this.setLabelValue(this.getReplaceText()); // 重新解析\n        }\n    }\n\n    /**监听数据发生了变动的情况 */\n    onValueChanged(n, o, pathArr: string[]) {\n        if (this.templateMode === false) {\n            this.setLabelValue(n);\n\n        } else {\n            let path = pathArr.join('.');\n            //寻找缓存位置\n            let index = this.watchPathArr.findIndex(v => v === path);\n\n            if (index >= 0) {\n                //如果是所属的路径，就可以替换文本了\n                this.templateValueArr[index] = n; //缓存值\n                this.setLabelValue(this.getReplaceText()); // 重新解析文本\n            }\n        }\n    }\n\n    setLabelValue(value) {\n        this.getComponent(this.labelType).string = value + '';\n    }\n\n    getLabelValue(): string {\n        return this.getComponent(this.labelType).string;\n    }\n\n    checkLabel() {\n        let checkArray = [\n            'cc.Label',\n            'cc.RichText',\n            'cc.EditBox',\n        ];\n\n        for (let i = 0; i < checkArray.length; i++) {\n            const e = checkArray[i];\n            let comp = this.node.getComponent(e);\n            if (comp) {\n                this.labelType = e;\n                return true;\n            }\n        }\n        cc.error('没有挂载任何label组件');\n        return false;\n    }\n}\n"]}