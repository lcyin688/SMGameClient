{"version":3,"sources":["assets/c2f-framework/mvvm/VMParent.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { VM } from './ViewModel';\nimport VMBase from \"./VMBase\";\n\n\nconst { ccclass, property } = cc._decorator;\n\n/**\n * 提供VM环境，控制旗下所有VM节点\n * 一般用于 非全局的 VM绑定,VM 环境与 组件紧密相连\n * （Prefab 模式绑定）\n * VMParent 必须必其他组件优先执行\n * v0.1 修复bug ，现在可以支持 Parent 嵌套 （但是注意性能问题，不要频繁嵌套）\n */\n@ccclass\nexport default class VMParent extends cc.Component {\n\n    /**绑定的标签，可以通过这个tag 获取 当前的 vm 实例 */\n    protected tag: string = '_temp';\n    /**需要绑定的私有数据 */\n    protected data: any = {};\n    /**VM 管理 */\n    public VM = VM;\n\n    /**\n     * [注意]不能直接覆盖此方法，如果需要覆盖。\n     * 只能在该方法内部调用父类的实现 \n    ```ts\n        onLoad(){\n            super.onLoad();\n        }\n    ``` \n     * \n     */\n    protected onLoad() {\n        if (this.data == null) return;\n\n        this.tag = '_temp' + '<' + this.node.uuid.replace('.', '') + '>';\n        VM.add(this.data, this.tag);\n        //cc.log(VM['_mvs'],tag)\n        //搜寻所有节点：找到 watch path\n        let comps = this.getVMComponents();\n        //console.group();\n        for (let i = 0; i < comps.length; i++) {\n            const comp = comps[i];\n            this.replaceVMPath(comp, this.tag)\n        }\n        //console.groupEnd()\n\n        this.onBind();\n    }\n\n    /**在 onLoad 完成 和 start() 之前调用，你可以在这里进行初始化数据等操作 */\n    protected onBind() {\n    }\n\n    /**在 onDestroy() 后调用,此时仍然可以获取绑定的 data 数据*/\n    protected onUnBind() {\n    }\n\n    private replaceVMPath(comp: cc.Component, tag: string) {\n        let path: string = comp['watchPath'];\n        //let comp_name: string = comp.name;\n\n        if (comp['templateMode'] == true) {\n            let pathArr: string[] = comp['watchPathArr'];\n            if (pathArr) {\n                for (let i = 0; i < pathArr.length; i++) {\n                    const path = pathArr[i];\n                    pathArr[i] = path.replace('*', tag);\n                }\n            }\n        } else {\n            //VMLabel\n            //遇到特殊 path 就优先替换路径\n            if (path.split('.')[0] === '*') {\n                comp['watchPath'] = path.replace('*', tag);\n            }\n        }\n    }\n\n    /**未优化的遍历节点，获取VM 组件 */\n    private getVMComponents() {\n        let comps = this.node.getComponentsInChildren('VMBase');\n        let parents = this.node.getComponentsInChildren('VMParent').filter(v => v.uuid !== this.uuid); //过滤掉自己\n\n        //过滤掉不能赋值的parent\n        let filters = [];\n        parents.forEach((node: cc.Node) => {\n            filters = filters.concat(node.getComponentsInChildren('VMBase'));\n        })\n\n        comps = comps.filter((v) => filters.indexOf(v) < 0);\n        return comps;\n    }\n\n    /**\n     * [注意]不能覆盖此方法，如果需要覆盖。\n     * 需要在该方法内部调用父类的实现，再定义自己的方法\n      ```ts\n        onDestroy(){\n            super.onDestroy();\n        }\n      ```\n     */\n    protected onDestroy() {\n        this.onUnBind();\n        //解除全部引用\n        VM.remove(this.tag);\n        this.data = null;\n    }\n}\n"]}