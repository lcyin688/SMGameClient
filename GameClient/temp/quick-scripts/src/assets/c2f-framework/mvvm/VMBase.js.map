{"version":3,"sources":["assets/c2f-framework/mvvm/VMBase.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { VM } from './ViewModel';\n\n\n//用来处理通知数据的层级\n//控制旗下子节点的数据\n\n//目前只是起到一个识别组件的作用，之后会抽象很多功能在这里面\n\n// player.equips.* 可以自动根据所在父对象的位置设置顺序\n\nconst DEBUG_WATCH_PATH: boolean = false;\n\nconst { ccclass, property } = cc._decorator;\n\n/**\n * watchPath 的基础，只提供绑定功能 和 对应的数据更新函数\n */\n@ccclass\nexport default class VMBase extends cc.Component {\n    /** watch 单路径  */\n    public watchPath: string = '';\n    /** watch 多路径 */\n    protected watchPathArr: string[] = [];\n    /**是否启用模板多路径模式 */\n    public templateMode: boolean = false;\n    /**储存模板多路径的值 */\n    protected templateValueArr: any[] = [];\n    /**VM管理 */\n    public VM = VM;\n\n    /**\n     * 如果需要重写onLoad 方法，请根据顺序调用 super.onLoad()，执行默认方法\n     */\n    onLoad() {\n        if (CC_EDITOR) return;\n\n        //提前拆分、并且解析路径\n        let paths = this.watchPath.split('.');\n        for (let i = 1; i < paths.length; i++) {\n            const p = paths[i];\n            //如果发现了路径使用了 * ，则自动去自己的父节点查找自己所在 index 值\n            if (p == '*') {\n                let index = this.node.getParent().children.findIndex(n => n === this.node);\n                if (index <= 0) index = 0;\n                paths[i] = index.toString();\n                break;\n            }\n        }\n\n        //替换掉原路径\n        this.watchPath = paths.join('.');\n\n        //提前进行路径数组 的 解析\n        let pathArr = this.watchPathArr;\n        if (pathArr.length >= 1) {\n            for (let i = 0; i < pathArr.length; i++) {\n                const path = pathArr[i];\n                let paths = path.split('.');\n\n                for (let i = 1; i < paths.length; i++) {\n                    const p = paths[i];\n                    if (p == '*') {\n                        let index = this.node.getParent().children.findIndex(n => n === this.node);\n                        if (index <= 0) index = 0;\n                        paths[i] = index.toString();\n                        break;\n                    }\n                }\n                this.watchPathArr[i] = paths.join('.');\n            }\n        }\n\n        //打印出所有绑定的路径，方便调试信息\n        if (DEBUG_WATCH_PATH && CC_DEBUG) {\n            cc.log('所有路径', this.watchPath ? [this.watchPath] : this.watchPathArr, '<<', this.node.getParent().name + '.' + this.node.name)\n        }\n        if (this.watchPath == '' && this.watchPathArr.join('') == '') {\n            cc.log('可能未设置路径的节点:', this.node.getParent().name + '.' + this.node.name);\n        }\n    }\n\n    onEnable() {\n        if (CC_EDITOR) return;//编辑器模式不能判断\n        if (this.templateMode) {\n            this.setMultPathEvent(true);\n        } else if (this.watchPath != '') {\n            this.VM.bindPath(this.watchPath, this.onValueChanged, this);\n        }\n\n        this.onValueInit();//激活时,调用值初始化\n    }\n\n    onDisable() {\n        if (CC_EDITOR) return;//编辑器模式不能判断\n        if (this.templateMode) {\n            this.setMultPathEvent(false);\n        } else if (this.watchPath != '') {\n            this.VM.unbindPath(this.watchPath, this.onValueChanged, this);\n        }\n    }\n\n    //多路径监听方式\n    private setMultPathEvent(enabled: boolean = true) {\n        if (CC_EDITOR) return;\n        let arr = this.watchPathArr;\n        for (let i = 0; i < arr.length; i++) {\n            const path = arr[i];\n            if (enabled) {\n                this.VM.bindPath(path, this.onValueChanged, this);\n            } else {\n                this.VM.unbindPath(path, this.onValueChanged, this);\n            }\n        }\n    }\n\n    protected onValueInit() {\n        //虚方法\n    }\n\n    protected onValueChanged(n, o, pathArr: string[]) {\n    }\n}"]}