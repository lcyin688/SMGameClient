{"version":3,"sources":["assets/c2f-framework/core/random/RandomManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\n/** 随机管理 */\nclass RandomManager {\n    private static _instance: RandomManager;\n    /** 随机数管理单例对象 */\n    static get instance(): RandomManager {\n        if (this._instance == null) {\n            this._instance = new RandomManager();\n        }\n        return this._instance;\n    }\n\n    private seedrandom!: any;\n    private getRandom(): number {\n        if (this.seedrandom)\n            return this.seedrandom.quick();\n\n        return Math.random();\n    }\n\n    /** 设置随机种子 */\n    setSeed(seed: number) {\n        //@ts-ignore\n        this.seedrandom = new Math.seedrandom(seed);\n    }\n\n    /**\n     * 生成指定范围的随机浮点数\n     * @param min   最小值\n     * @param max   最大值\n     * @param type  类型\n     */\n    getRandomFloat(min: number, max: number): number {\n        return this.getRandom() * (max - min) + min;\n    }\n\n    /**\n     * 生成指定范围的随机整数\n     * @param min   最小值\n     * @param max   最大值\n     * @param type  类型\n     * @example\n    var min = 1;\n    var max = 10;\n    // [min,max) 得到一个两数之间的随机整数,这个值不小于min（如果min不是整数的话，得到一个向上取整的 min），并且小于（但不等于）max  \n    c2f.random.getRandomInt(min, max, 1);\n\n    // [min,max] 得到一个两数之间的随机整数，包括两个数在内,这个值比min大（如果min不是整数，那就不小于比min大的整数），但小于（但不等于）max\n    c2f.random.getRandomInt(min, max, 2);\n\n    // (min,max) 得到一个两数之间的随机整数\n    c2f.random.getRandomInt(min, max, 3);\n     */\n    getRandomInt(min: number, max: number, type: number = 2): number {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        switch (type) {\n            case 1: // [min,max) 这个值不小于min（如果min不是整数的话，得到一个向上取整的 min），并且小于（但不等于）max  \n                return Math.floor(this.getRandom() * (max - min)) + min;\n            case 2: // [min,max] 包括两个数在内,这个值比min大（如果min不是整数，那就不小于比min大的整数），但小于（但不等于）max\n                return Math.floor(this.getRandom() * (max - min + 1)) + min;\n            case 3: // (min,max) 得到一个两数之间的随机整数\n                return Math.floor(this.getRandom() * (max - min - 1)) + min + 1;\n        }\n        return 0;\n    }\n\n    /**\n     * 根据最大值，最小值范围生成随机数数组\n     * @param min   最小值\n     * @param max   最大值\n     * @param n     随机个数\n     * @param type  类型\n     * @example\n    var a = c2f.random.getRandomByMinMaxList(50, 100, 5)\n    console.log(\"随机的数字\", a);\n     */\n    getRandomByMinMaxList(min: number, max: number, n: number): Array<number> {\n        var result: Array<number> = [];\n        for (let i = 0; i < n; i++) {\n            result.push(this.getRandomInt(min, max))\n        }\n        return result;\n    }\n\n    /**\n     * 获取数组中随机对象\n     * @param objects 对象数组\n     * @param n 随机个数\n     * @example\n    var b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    var r = c2f.random.getRandomByObjectList(b, 5);\n    console.log(\"原始的对象\", b);\n    console.log(\"随机的对象\", r);\n     */\n    getRandomByObjectList<T>(objects: Array<T>, n: number): Array<T> {\n        var temp: Array<T> = objects.slice();\n        var result: Array<T> = [];\n        for (let i = 0; i < n; i++) {\n            let index = this.getRandomInt(0, objects.length, n);\n            result.push(temp.splice(index, 1)[0]);\n        }\n        return result;\n    }\n\n    /**\n     * 定和随机分配\n     * @param n     随机数量\n     * @param sum   随机元素合\n     * @example\n    var c = c2f.random.getRandomBySumList(5, -100);\n    console.log(\"定和随机分配\", c);\n     */\n    getRandomBySumList(n: number, sum: number): number[] {\n        var residue = sum;\n        var value = 0;\n        var result: Array<number> = [];\n        for (let i = 0; i < n; i++) {\n            value = this.getRandomInt(0, residue, 3);\n            if (i == n - 1) {\n                value = residue;\n            }\n            else {\n                residue -= value;\n            }\n            result.push(value);\n        }\n        return result;\n    }\n}\n\ndeclare global {\n    interface IC2F {\n        random: RandomManager;\n    }\n}\nc2f.random = RandomManager.instance;\nexport { };"]}