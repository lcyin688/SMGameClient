{"version":3,"sources":["assets/c2f-framework/component/common/BlurScreen.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { C2FConst } from \"../../define/C2FConst\";\n\nconst { ccclass, menu, property } = cc._decorator;\n\n@ccclass\n@menu('c2f/common/BlurScreen')\nexport default class BlurScreen extends cc.Component {\n\n\t/** 多重叠加背景 */\n\tprivate asBackgroud: cc.Sprite = null;\n\t/** 当前显示背景 */\n\tprivate screenCopy: cc.Sprite = null;\n\t/** 窗口对应Texture */\n\tprivate mapTexture2View: Map<string, cc.RenderTexture> = null;\n\n\n\tprivate createBGSprite(bgName: string, mat: cc.Material) {\n\t\tlet newNode = new cc.Node(bgName);\n\t\tnewNode.scaleY = -1;\n\n\t\tnewNode.parent = this.node;\n\t\tnewNode.width = cc.visibleRect.width;\n\t\tnewNode.height = cc.visibleRect.height;\n\t\tlet spBg = newNode.addComponent(cc.Sprite);\n\t\tspBg.sizeMode = cc.Sprite.SizeMode.CUSTOM;\n\t\tnewNode.active = false;\n\t\tspBg.setMaterial(0, mat);\n\t\treturn spBg;\n\t}\n\n\t/** 初始化 */\n\tpublic initUI() {\n\t\t//动态背景尺寸\n\t\tif (!this.screenCopy) {\n\t\t\t/** 材质 */\n\t\t\tc2f.res.load(C2FConst.fwBundleName, 'commonRes/shader/materials/blurImg', cc.Material, (err: Error | null, mat: cc.Material) => {\n\t\t\t\tthis.screenCopy = this.createBGSprite('screenCopy', mat);\n\t\t\t\tthis.asBackgroud = this.createBGSprite('asBg', mat);\n\t\t\t})\n\t\t}\n\t\t//模糊背景缓存\n\t\tif (!this.mapTexture2View) {\n\t\t\tthis.mapTexture2View = new Map();\n\t\t}\n\t}\n\n\t/** 添加模糊背景\n\t * @param layerName 窗口名称(预制体名)\n\t * @param endCb 添加完成回调\n\t * @param preFloorN 上一层窗口名称\n\t */\n\tpublic addBlurBg(layerName: string, endCb: Function, preFloorN: string) {\n\t\tif (this.mapTexture2View && this.mapTexture2View.has(layerName)) {\n\t\t\tlet texture = this.mapTexture2View.get(layerName);\n\t\t\tthis.screenCopy.spriteFrame = new cc.SpriteFrame(texture);\n\t\t\tthis.screenCopy.node.active = true;\n\t\t\tthis.playBlurInAnima(endCb);\n\t\t} else {\n\t\t\tthis.copyScreen(layerName, endCb, preFloorN);\n\t\t}\n\t}\n\n\t/** 移除模糊背景 */\n\tpublic removedBlurBg(layerName: string) {\n\t\tif (this.mapTexture2View) {\n\t\t\tthis.mapTexture2View.delete(layerName);\n\t\t}\n\t}\n\n\t/** 清空模糊背景 */\n\tpublic cleanBlurBg() {\n\t\tif (this.mapTexture2View) {\n\t\t\tthis.mapTexture2View.clear();\n\t\t}\n\t}\n\n\t/** 屏幕截图 */\n\tprivate copyScreen(layerName: string, endCb: Function, preFloorN: string) {\n\t\t//画布\n\t\tlet curTexture = new cc.RenderTexture();\n\t\tcurTexture.initWithSize(cc.visibleRect.width, cc.visibleRect.height, cc.RenderTexture.DepthStencilFormat.RB_FMT_S8);\n\t\tthis.mapTexture2View.set(layerName, curTexture);\n\t\t//是否有叠加截屏\n\t\tlet isOverlayCopy = this.mapTexture2View.size > 1;\n\t\tif (preFloorN.length > 0) {\n\t\t\tlet preTexture = this.mapTexture2View.get(preFloorN);\n\t\t\tif (preTexture) {\n\t\t\t\tthis.asBackgroud.spriteFrame = new cc.SpriteFrame(preTexture);\n\t\t\t\tthis.asBackgroud.node.active = true;\n\t\t\t}\n\t\t}\n\t\t//先隐藏自身\n\t\tthis.screenCopy.node.active = false;\n\t\t//隐藏正在播放出入场的界面\n\t\tc2f.gui.hideAnimaPlayingView();\n\t\t//屏幕拷贝\n\t\tlet cameraNode = cc.Canvas.instance.node.getChildByName(\"Camera\");\n\t\tlet camera = cameraNode.getComponent(cc.Camera);\n\t\tif (camera) {\n\t\t\tcamera.targetTexture = curTexture;\n\t\t\tcamera.render(null);\n\t\t\tcamera.targetTexture = null;\n\t\t}\n\t\tthis.asBackgroud.node.active = false;\n\t\t//恢复正在播放出入场的界面\n\t\tc2f.gui.showAnimaPlayingView();\n\t\t//显示自身\n\t\tthis.screenCopy.node.active = true;\n\t\tlet spriteFrame = new cc.SpriteFrame(curTexture);\n\t\tthis.screenCopy.spriteFrame = spriteFrame;\n\n\t\tthis.playBlurInAnima(endCb);\n\t}\n\n\t/** 播放渐显效果 */\n\tprivate playBlurInAnima(endCb: Function) {\n\t\tthis.screenCopy.node.opacity = 180;\n\t\tcc.tween(this.screenCopy.node)\n\t\t\t.to(0.3, { opacity: 255 })\n\t\t\t.call(() => {\n\t\t\t\tendCb && endCb();\n\t\t\t})\n\t\t\t.start()\n\t}\n}\n"]}