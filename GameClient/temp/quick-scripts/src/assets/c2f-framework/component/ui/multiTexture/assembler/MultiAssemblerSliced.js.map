{"version":3,"sources":["assets/c2f-framework/component/ui/multiTexture/assembler/MultiAssemblerSliced.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import MultiAssembler from \"./MultiAssembler\";\n\nexport default class MultiAssemblerSliced extends MultiAssembler {\n    public initData() {\n        this.verticesCount = 16;\n        this.indicesCount = 54;\n\n        if (this._renderData.meshCount > 0) return;\n        let data = this._renderData;\n        // createFlexData支持创建指定格式的renderData\n        data.createFlexData(0, this.verticesCount, this.indicesCount, this.getVfmt());\n\n        let indices = this._renderData.iDatas[0];\n        let indexOffset = 0;\n        for (let r = 0; r < 3; ++r) {\n            for (let c = 0; c < 3; ++c) {\n                let start = r * 4 + c;\n                indices[indexOffset++] = start;\n                indices[indexOffset++] = start + 1;\n                indices[indexOffset++] = start + 4;\n                indices[indexOffset++] = start + 1;\n                indices[indexOffset++] = start + 5;\n                indices[indexOffset++] = start + 4;\n            }\n        }\n    }\n\n    public initLocal() {\n        this._local = [];\n        this._local.length = 8;\n    }\n\n    public updateRenderData(sprite) {\n        let frame = sprite._spriteFrame;\n        this.packToDynamicAtlas(sprite, frame);\n\n        if (sprite._vertsDirty) {\n            this.updateUVs(sprite);\n            this.updateVerts(sprite);\n            this.updateTextureIdx(sprite);\n            sprite._vertsDirty = false;\n        }\n    }\n\n    public updateVerts(sprite) {\n        let node = sprite.node,\n            width = node.width, height = node.height,\n            appx = node.anchorX * width, appy = node.anchorY * height;\n\n        let frame = sprite.spriteFrame;\n        let leftWidth = frame.insetLeft;\n        let rightWidth = frame.insetRight;\n        let topHeight = frame.insetTop;\n        let bottomHeight = frame.insetBottom;\n\n        let sizableWidth = width - leftWidth - rightWidth;\n        let sizableHeight = height - topHeight - bottomHeight;\n        let xScale = width / (leftWidth + rightWidth);\n        let yScale = height / (topHeight + bottomHeight);\n        xScale = (isNaN(xScale) || xScale > 1) ? 1 : xScale;\n        yScale = (isNaN(yScale) || yScale > 1) ? 1 : yScale;\n        sizableWidth = sizableWidth < 0 ? 0 : sizableWidth;\n        sizableHeight = sizableHeight < 0 ? 0 : sizableHeight;\n\n        // update local\n        let local = this._local;\n        local[0] = -appx;\n        local[1] = -appy;\n        local[2] = leftWidth * xScale - appx;\n        local[3] = bottomHeight * yScale - appy;\n        local[4] = local[2] + sizableWidth;\n        local[5] = local[3] + sizableHeight;\n        local[6] = width - appx;\n        local[7] = height - appy;\n\n        this.updateWorldVerts(sprite);\n    }\n\n    public updateUVs(sprite) {\n        let verts = this._renderData.vDatas[0];\n        let uvSliced = sprite.spriteFrame.uvSliced;\n        let uvOffset = this.uvOffset;\n        let floatsPerVert = this.floatsPerVert;\n        for (let row = 0; row < 4; ++row) {\n            for (let col = 0; col < 4; ++col) {\n                let vid = row * 4 + col;\n                let uv = uvSliced[vid];\n                let voffset = vid * floatsPerVert;\n                verts[voffset + uvOffset] = uv.u;\n                verts[voffset + uvOffset + 1] = uv.v;\n            }\n        }\n    }\n\n    public updateWorldVerts(sprite) {\n        let matrix = sprite.node._worldMatrix;\n        let matrixm = matrix.m,\n            a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5],\n            tx = matrixm[12], ty = matrixm[13];\n\n        let local = this._local;\n        let world = this._renderData.vDatas[0];\n\n        let floatsPerVert = this.floatsPerVert;\n        for (let row = 0; row < 4; ++row) {\n            let localRowY = local[row * 2 + 1];\n            for (let col = 0; col < 4; ++col) {\n                let localColX = local[col * 2];\n                let worldIndex = (row * 4 + col) * floatsPerVert;\n                world[worldIndex] = localColX * a + localRowY * c + tx;\n                world[worldIndex + 1] = localColX * b + localRowY * d + ty;\n            }\n        }\n    }\n}\n\nif (CC_NATIVERENDERER) {\n    let proto = MultiAssemblerSliced.prototype;\n    //@ts-ignore\n    let nativeProto = renderer.SlicedSprite2D.prototype;\n\n    proto.updateWorldVerts = function (comp) {\n        //@ts-ignore\n        this._dirtyPtr[0] |= cc.Assembler.FLAG_VERTICES_DIRTY;\n    };\n\n    //@ts-ignore\n    proto._extendNative = function () {\n        nativeProto.ctor.call(this);\n    };\n\n    proto.initLocal = function () {\n        this._local = new Float32Array(8);\n        nativeProto.setLocalData.call(this, this._local);\n    };\n}\n"]}