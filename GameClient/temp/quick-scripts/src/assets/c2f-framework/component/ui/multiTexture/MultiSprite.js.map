{"version":3,"sources":["assets/c2f-framework/component/ui/multiTexture/MultiSprite.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import EditorTool from \"../../../utils/EditorTool\";\nimport MultiAssemblerBarFilled from \"./assembler/MultiAssemblerBarFilled\";\nimport MultiAssemblerRadialFilled from \"./assembler/MultiAssemblerRadialFilled\";\nimport MultiAssemblerSimple from \"./assembler/MultiAssemblerSimple\";\nimport MultiAssemblerSliced from \"./assembler/MultiAssemblerSliced\";\nimport MultiAssemblerTiled from \"./assembler/MultiAssemblerTiled\";\nimport { MultiTextureManager } from \"./MultiTextureManager\";\n\nconst { ccclass, property, requireComponent, menu, inspector } = cc._decorator;\n\n/**\n * Multi-Texture 渲染组件，兼容web与native，支持simple、sliced、tiled、filled\n */\n@ccclass\n@menu(\"c2f/UI/MultiSprite\")\n@inspector(\"packages://inspector/inspectors/comps/sprite.js\")\nexport default class MultiSprite extends cc.Sprite {\n\n    private _textureIdx: number = 0;\n    /** 当前渲染组件使用的纹理下标，不需要主动调用，该组件内部会自行处理 */\n    private get textureIdx(): number { return this._textureIdx; }\n    private set textureIdx(v: number) {\n        this._textureIdx = cc.misc.clampf(v, 0, MultiTextureManager.MAX_TEXTURE_NUM - 1);\n        this[\"setVertsDirty\"]();\n    }\n\n    protected resetInEditor(): void {\n        EditorTool.load<cc.Material>(\"res/shader/materials/multiTexture.mtl\").then((mat) => {\n            if (mat) {\n                this.setMaterial(0, mat);\n            }\n        });\n    }\n\n    protected onLoad(): void {\n        super.onLoad?.();\n        MultiTextureManager.addSprite(this);\n    }\n\n    protected onDestroy(): void {\n        super.onDestroy?.();\n        MultiTextureManager.removeSprite(this);\n    }\n\n    /**\n     * 设置spriteFrame和material时引擎内部会调用，更新textureIdx，更新材质属性\n     * @override\n     */\n    public _updateMaterial(): void {\n        // make sure material is belong to self.\n        let material = this.getMaterial(0);\n        if (material) {\n            let texture = null;\n            let textureImpl = null;\n            if (this.spriteFrame) {\n                texture = this.spriteFrame.getTexture();\n                textureImpl = texture && texture.getImpl();\n            }\n            if (material.name.indexOf(\"multiTexture\") >= 0) {\n                // 初始化纹理管理器\n                MultiTextureManager.init(material[\"_material\"]);\n                // 更新textureIdx\n                let idx = MultiTextureManager.getIdx(texture);\n                if (idx >= 0) {\n                    this.textureIdx = idx;\n                }\n                if (material.getProperty(`texture${this.textureIdx}`, 0) !== textureImpl) {\n                    material.setProperty(`texture${this.textureIdx}`, texture);\n                }\n            } else {\n                if (material.getProperty(`texture`, 0) !== textureImpl) {\n                    material.setProperty(`texture`, texture);\n                }\n            }\n        }\n\n        cc.BlendFunc.prototype[\"_updateMaterial\"].call(this);\n    }\n}\n\ncc.Assembler.register(MultiSprite, {\n    getConstructor(sprite) {\n        let ctor: any = MultiAssemblerSimple;\n        switch (sprite.type) {\n            case cc.Sprite.Type.SLICED:\n                ctor = MultiAssemblerSliced;\n                break;\n            case cc.Sprite.Type.TILED:\n                ctor = MultiAssemblerTiled;\n                break;\n            case cc.Sprite.Type.FILLED:\n                if (sprite._fillType === cc.Sprite.FillType.RADIAL) {\n                    ctor = MultiAssemblerRadialFilled;\n                } else {\n                    ctor = MultiAssemblerBarFilled;\n                }\n                break;\n        }\n        return ctor;\n    }\n});\n"]}