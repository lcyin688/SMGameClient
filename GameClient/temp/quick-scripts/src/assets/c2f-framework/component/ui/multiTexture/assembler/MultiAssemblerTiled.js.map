{"version":3,"sources":["assets/c2f-framework/component/ui/multiTexture/assembler/MultiAssemblerTiled.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import MultiAssembler from \"./MultiAssembler\";\n\nexport default class MultiAssemblerTiled extends MultiAssembler {\n    private contentWidth: number = 0;\n    private contentHeight: number = 0;\n    private rectWidth: number = 0;\n    private rectHeight: number = 0;\n    private hRepeat: number = 0;\n    private vRepeat: number = 0;\n    private row: number = 0;\n    private col: number = 0;\n    private sizableWidth: number = 0;\n    private sizableHeight: number = 0;\n\n    public initData() {\n        this.verticesCount = 0;\n        this.contentWidth = 0;\n        this.contentHeight = 0;\n        this.rectWidth = 0;\n        this.rectHeight = 0;\n        this.hRepeat = 0;\n        this.vRepeat = 0;\n        this.row = 0;\n        this.col = 0;\n\n        if (this._renderData.meshCount > 0) return;\n        let data = this._renderData;\n        // createFlexData支持创建指定格式的renderData\n        data.createFlexData(0, 4, 6, this.getVfmt());\n\n        this._updateIndices();\n    }\n\n    public initLocal() {\n        this._local = { x: [], y: [] } as any;\n    }\n\n    private _updateIndices() {\n        let iData = this._renderData.iDatas[0];\n        for (let i = 0, vid = 0, l = iData.length; i < l; i += 6, vid += 4) {\n            iData[i] = vid;\n            iData[i + 1] = vid + 1;\n            iData[i + 2] = vid + 2;\n            iData[i + 3] = vid + 1;\n            iData[i + 4] = vid + 3;\n            iData[i + 5] = vid + 2;\n        }\n    }\n\n    public updateRenderData(sprite) {\n        let frame = sprite._spriteFrame;\n        this.packToDynamicAtlas(sprite, frame);\n\n        let node = sprite.node;\n\n        let contentWidth = this.contentWidth = Math.abs(node.width);\n        let contentHeight = this.contentHeight = Math.abs(node.height);\n        let rect = frame._rect;\n        let leftWidth = frame.insetLeft, rightWidth = frame.insetRight, centerWidth = rect.width - leftWidth - rightWidth,\n            topHeight = frame.insetTop, bottomHeight = frame.insetBottom, centerHeight = rect.height - topHeight - bottomHeight;\n        this.sizableWidth = contentWidth - leftWidth - rightWidth;\n        this.sizableHeight = contentHeight - topHeight - bottomHeight;\n        this.sizableWidth = this.sizableWidth > 0 ? this.sizableWidth : 0;\n        this.sizableHeight = this.sizableHeight > 0 ? this.sizableHeight : 0;\n        let hRepeat = this.hRepeat = centerWidth === 0 ? this.sizableWidth : this.sizableWidth / centerWidth;\n        let vRepeat = this.vRepeat = centerHeight === 0 ? this.sizableHeight : this.sizableHeight / centerHeight;\n        let row = this.row = Math.ceil(vRepeat + 2);\n        let col = this.col = Math.ceil(hRepeat + 2);\n\n        // update data property\n        let count = row * col;\n        this.verticesCount = count * 4;\n        this.indicesCount = count * 6;\n\n        let renderData = this._renderData;\n        let flexBuffer = renderData._flexBuffer;\n        if (flexBuffer.reserve(this.verticesCount, this.indicesCount)) {\n            this._updateIndices();\n            this.updateColor(sprite);\n        }\n        flexBuffer.used(this.verticesCount, this.indicesCount);\n\n        if (sprite._vertsDirty) {\n            this.updateUVs(sprite);\n            this.updateVerts(sprite);\n            this.updateTextureIdx(sprite);\n            sprite._vertsDirty = false;\n        }\n    }\n\n    public updateVerts(sprite) {\n        let frame = sprite._spriteFrame;\n        let rect = frame._rect;\n        let node = sprite.node,\n            appx = node.anchorX * node.width, appy = node.anchorY * node.height;\n\n        let { row, col, contentWidth, contentHeight } = this;\n        let { x, y } = this._local as any;\n        x.length = y.length = 0;\n        let leftWidth = frame.insetLeft, rightWidth = frame.insetRight, centerWidth = rect.width - leftWidth - rightWidth,\n            topHeight = frame.insetTop, bottomHeight = frame.insetBottom, centerHeight = rect.height - topHeight - bottomHeight;\n        let xScale = (node.width / (leftWidth + rightWidth)) > 1 ? 1 : (node.width / (leftWidth + rightWidth));\n        let yScale = (node.height / (topHeight + bottomHeight)) > 1 ? 1 : (node.height / (topHeight + bottomHeight));\n        let offsetWidth = 0, offsetHeight = 0;\n        if (centerWidth > 0) {\n            /*\n             * Because the float numerical calculation in javascript is not accurate enough, \n             * there is an expected result of 1.0, but the actual result is 1.000001.\n             */\n            offsetWidth = Math.floor(this.sizableWidth * 1000) / 1000 % centerWidth === 0 ? centerWidth : this.sizableWidth % centerWidth;\n        }\n        else {\n            offsetWidth = this.sizableWidth;\n        }\n        if (centerHeight > 0) {\n            offsetHeight = Math.floor(this.sizableHeight * 1000) / 1000 % centerHeight === 0 ? centerHeight : this.sizableHeight % centerHeight;\n        }\n        else {\n            offsetHeight = this.sizableHeight;\n        }\n\n        for (let i = 0; i <= col; i++) {\n            if (i === 0) {\n                x[i] = - appx;\n            }\n            else if (i > 0 && i < col) {\n                if (i === 1) {\n                    x[i] = leftWidth * xScale + Math.min(centerWidth, this.sizableWidth) - appx;\n                }\n                else {\n                    if (centerWidth > 0) {\n                        if (i === (col - 1)) {\n                            x[i] = leftWidth + offsetWidth + centerWidth * (i - 2) - appx;\n                        }\n                        else {\n                            x[i] = leftWidth + Math.min(centerWidth, this.sizableWidth) + centerWidth * (i - 2) - appx;\n                        }\n                    }\n                    else {\n                        x[i] = leftWidth + this.sizableWidth - appx;\n                    }\n                }\n            }\n            else if (i === col) {\n                x[i] = Math.min(leftWidth + this.sizableWidth + rightWidth, contentWidth) - appx;\n            }\n        }\n        for (let i = 0; i <= row; i++) {\n            if (i === 0) {\n                y[i] = - appy;\n            }\n            else if (i > 0 && i < row) {\n                if (i === 1) {\n                    y[i] = bottomHeight * yScale + Math.min(centerHeight, this.sizableHeight) - appy;\n                }\n                else {\n                    if (centerHeight > 0) {\n                        if (i === (row - 1)) {\n                            y[i] = bottomHeight + offsetHeight + (i - 2) * centerHeight - appy;\n                        }\n                        else {\n                            y[i] = bottomHeight + Math.min(centerHeight, this.sizableHeight) + (i - 2) * centerHeight - appy;\n                        }\n                    }\n                    else {\n                        y[i] = bottomHeight + this.sizableHeight - appy;\n                    }\n                }\n            }\n            else if (i === row) {\n                y[i] = Math.min(bottomHeight + this.sizableHeight + topHeight, contentHeight) - appy;\n            }\n        }\n\n        this.updateWorldVerts(sprite);\n    }\n\n    public updateWorldVerts(sprite) {\n        let renderData = this._renderData;\n        let local: any = this._local;\n        let localX = local.x, localY = local.y;\n        let world = renderData.vDatas[0];\n        let { row, col } = this;\n        let matrix = sprite.node._worldMatrix;\n        let matrixm = matrix.m;\n        let a = matrixm[0], b = matrixm[1], c = matrixm[4], d = matrixm[5],\n            tx = matrixm[12], ty = matrixm[13];\n\n        let x, x1, y, y1;\n        let floatsPerVert = this.floatsPerVert;\n        let vertexOffset = 0;\n\n        if (CC_NATIVERENDERER) {\n            for (let yindex = 0, ylength = row; yindex < ylength; ++yindex) {\n                y = localY[yindex];\n                y1 = localY[yindex + 1];\n                for (let xindex = 0, xlength = col; xindex < xlength; ++xindex) {\n                    x = localX[xindex];\n                    x1 = localX[xindex + 1];\n\n                    // lb\n                    world[vertexOffset] = x;\n                    world[vertexOffset + 1] = y;\n                    vertexOffset += floatsPerVert;\n                    // rb\n                    world[vertexOffset] = x1;\n                    world[vertexOffset + 1] = y;\n                    vertexOffset += floatsPerVert;\n                    // lt\n                    world[vertexOffset] = x;\n                    world[vertexOffset + 1] = y1;\n                    vertexOffset += floatsPerVert;\n                    // rt\n                    world[vertexOffset] = x1;\n                    world[vertexOffset + 1] = y1;\n                    vertexOffset += floatsPerVert;\n                }\n            }\n        } else {\n            for (let yindex = 0, ylength = row; yindex < ylength; ++yindex) {\n                y = localY[yindex];\n                y1 = localY[yindex + 1];\n                for (let xindex = 0, xlength = col; xindex < xlength; ++xindex) {\n                    x = localX[xindex];\n                    x1 = localX[xindex + 1];\n\n                    // lb\n                    world[vertexOffset] = x * a + y * c + tx;\n                    world[vertexOffset + 1] = x * b + y * d + ty;\n                    vertexOffset += floatsPerVert;\n                    // rb\n                    world[vertexOffset] = x1 * a + y * c + tx;\n                    world[vertexOffset + 1] = x1 * b + y * d + ty;\n                    vertexOffset += floatsPerVert;\n                    // lt\n                    world[vertexOffset] = x * a + y1 * c + tx;\n                    world[vertexOffset + 1] = x * b + y1 * d + ty;\n                    vertexOffset += floatsPerVert;\n                    // rt\n                    world[vertexOffset] = x1 * a + y1 * c + tx;\n                    world[vertexOffset + 1] = x1 * b + y1 * d + ty;\n                    vertexOffset += floatsPerVert;\n                }\n            }\n        }\n    }\n\n    public updateUVs(sprite) {\n        let verts = this._renderData.vDatas[0];\n        if (!verts) return;\n\n        let frame = sprite._spriteFrame;\n        let rect = frame._rect;\n        let leftWidth = frame.insetLeft, rightWidth = frame.insetRight, centerWidth = rect.width - leftWidth - rightWidth,\n            topHeight = frame.insetTop, bottomHeight = frame.insetBottom, centerHeight = rect.height - topHeight - bottomHeight;\n\n        let { row, col, hRepeat, vRepeat } = this;\n        let coefu = 0, coefv = 0;\n        let uv = sprite.spriteFrame.uv;\n        let uvSliced = sprite.spriteFrame.uvSliced;\n        let rotated = sprite.spriteFrame._rotated;\n        let floatsPerVert = this.floatsPerVert, uvOffset = this.uvOffset;\n        let tempXVerts = [], tempYVerts = [];\n        for (let yindex = 0, ylength = row; yindex < ylength; ++yindex) {\n            if (this.sizableHeight > centerHeight) {\n                if (this.sizableHeight >= yindex * centerHeight) {\n                    coefv = 1;\n                }\n                else {\n                    coefv = vRepeat % 1;\n                }\n            }\n            else {\n                coefv = vRepeat;\n            }\n            for (let xindex = 0, xlength = col; xindex < xlength; ++xindex) {\n                if (this.sizableWidth > centerWidth) {\n                    if (this.sizableWidth >= xindex * centerWidth) {\n                        coefu = 1;\n                    }\n                    else {\n                        coefu = hRepeat % 1;\n                    }\n                }\n                else {\n                    coefu = hRepeat;\n                }\n\n                if (rotated) {\n                    if (yindex === 0) {\n                        tempXVerts[0] = uvSliced[0].u;\n                        tempXVerts[1] = uvSliced[0].u;\n                        tempXVerts[2] = uvSliced[4].u + (uvSliced[8].u - uvSliced[4].u) * coefv;\n                    } else if (yindex < (row - 1)) {\n                        tempXVerts[0] = uvSliced[4].u;\n                        tempXVerts[1] = uvSliced[4].u;\n                        tempXVerts[2] = uvSliced[4].u + (uvSliced[8].u - uvSliced[4].u) * coefv;\n                    } else if (yindex === (row - 1)) {\n                        tempXVerts[0] = uvSliced[8].u;\n                        tempXVerts[1] = uvSliced[8].u;\n                        tempXVerts[2] = uvSliced[12].u;\n                    }\n                    if (xindex === 0) {\n                        tempYVerts[0] = uvSliced[0].v;\n                        tempYVerts[1] = uvSliced[1].v + (uvSliced[2].v - uvSliced[1].v) * coefu;\n                        tempYVerts[2] = uvSliced[0].v;\n                    } else if (xindex < (col - 1)) {\n                        tempYVerts[0] = uvSliced[1].v;\n                        tempYVerts[1] = uvSliced[1].v + (uvSliced[2].v - uvSliced[1].v) * coefu;\n                        tempYVerts[2] = uvSliced[1].v;\n                    } else if (xindex === (col - 1)) {\n                        tempYVerts[0] = uvSliced[2].v;\n                        tempYVerts[1] = uvSliced[3].v;\n                        tempYVerts[2] = uvSliced[2].v;\n                    }\n                    tempXVerts[3] = tempXVerts[2];\n                    tempYVerts[3] = tempYVerts[1];\n                }\n                else {\n                    if (xindex === 0) {\n                        tempXVerts[0] = uvSliced[0].u;\n                        tempXVerts[1] = uvSliced[1].u + (uvSliced[2].u - uvSliced[1].u) * coefu;\n                        tempXVerts[2] = uv[0];\n                    } else if (xindex < (col - 1)) {\n                        tempXVerts[0] = uvSliced[1].u;\n                        tempXVerts[1] = uvSliced[1].u + (uvSliced[2].u - uvSliced[1].u) * coefu;\n                        tempXVerts[2] = uvSliced[1].u;\n                    } else if (xindex === (col - 1)) {\n                        tempXVerts[0] = uvSliced[2].u;\n                        tempXVerts[1] = uvSliced[3].u;\n                        tempXVerts[2] = uvSliced[2].u;\n                    }\n                    if (yindex === 0) {\n                        tempYVerts[0] = uvSliced[0].v;\n                        tempYVerts[1] = uvSliced[0].v;\n                        tempYVerts[2] = uvSliced[4].v + (uvSliced[8].v - uvSliced[4].v) * coefv;\n                    } else if (yindex < (row - 1)) {\n                        tempYVerts[0] = uvSliced[4].v;\n                        tempYVerts[1] = uvSliced[4].v;\n                        tempYVerts[2] = uvSliced[4].v + (uvSliced[8].v - uvSliced[4].v) * coefv;\n                    } else if (yindex === (row - 1)) {\n                        tempYVerts[0] = uvSliced[8].v;\n                        tempYVerts[1] = uvSliced[8].v;\n                        tempYVerts[2] = uvSliced[12].v;\n                    }\n                    tempXVerts[3] = tempXVerts[1];\n                    tempYVerts[3] = tempYVerts[2];\n                }\n                // lb\n                verts[uvOffset] = tempXVerts[0];\n                verts[uvOffset + 1] = tempYVerts[0];\n                uvOffset += floatsPerVert;\n                // rb\n                verts[uvOffset] = tempXVerts[1];\n                verts[uvOffset + 1] = tempYVerts[1];\n                uvOffset += floatsPerVert;\n                // lt\n                verts[uvOffset] = tempXVerts[2];\n                verts[uvOffset + 1] = tempYVerts[2];\n                uvOffset += floatsPerVert;\n                // rt\n                verts[uvOffset] = tempXVerts[3];\n                verts[uvOffset + 1] = tempYVerts[3];\n                uvOffset += floatsPerVert;\n            }\n        }\n    }\n}\n"]}