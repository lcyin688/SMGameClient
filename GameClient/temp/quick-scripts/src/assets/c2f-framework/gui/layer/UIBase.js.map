{"version":3,"sources":["assets/c2f-framework/gui/layer/UIBase.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,oEAAmE;AAE3D,IAAA,OAAO,GAAK,EAAE,CAAC,UAAU,QAAlB,CAAmB;AAElC,iBAAiB;AAEjB;IAA4B,0BAAY;IAAxC;QAAA,qEAyDC;QAxDG,YAAY;QACL,gBAAU,GAAW,EAAE,CAAC;QAE/B,YAAY;QACJ,sBAAgB,GAA2B,IAAI,CAAC;;IAoD5D,CAAC;IAnDG,sBAAI,mCAAe;aAAnB;YACI,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBACxB,IAAI,CAAC,gBAAgB,GAAG,IAAI,iCAAe,EAAE,CAAC;gBAC9C,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAI,IAAI,CAAC,UAAU,SAAI,IAAI,CAAC,IAAI,CAAC,IAAM,CAAC,CAAC;aAC9E;YACD,OAAO,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC;;;OAAA;IAED;;;;;OAKG;IACI,mBAAE,GAAT,UAAU,KAAa,EAAE,QAAsB,EAAE,MAAW;QACxD,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IACrD,CAAC;IAED;;;OAGG;IACI,oBAAG,GAAV,UAAW,KAAa;QACpB,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACpC;IACL,CAAC;IAED;;;;OAIG;IACI,qBAAI,GAAX,UAAY,KAAa;;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACrC,CAAA,KAAA,IAAI,CAAC,eAAe,CAAA,CAAC,IAAI,2BAAC,KAAK,GAAK,IAAI,GAAE;IAC9C,CAAC;IAED;;OAEG;IACI,uBAAM,GAAb;QACI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC;IAClC,CAAC;IAES,0BAAS,GAAnB;QACI,SAAS;QACT,IAAI,IAAI,CAAC,gBAAgB,EAAE;YACvB,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;YAChC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;SAChC;IACL,CAAC;IAxDQ,MAAM;QADlB,OAAO;OACK,MAAM,CAyDlB;IAAD,aAAC;CAzDD,AAyDC,CAzD2B,EAAE,CAAC,SAAS,GAyDvC;AAzDY,wBAAM","file":"","sourceRoot":"/","sourcesContent":["import { ListenerFunc } from \"../../core/event/EventDefine\";\nimport { EventDispatcher } from \"../../core/event/EventDispatcher\";\n\nconst { ccclass } = cc._decorator;\n\n/** 游戏显示对象组件模板 */\n@ccclass\nexport class UIBase extends cc.Component {\n    /** 预制体名称 */\n    public prefabName: string = '';\n\n    /** 事件触发器 */\n    private _eventDispatcher: EventDispatcher | null = null;\n    get eventDispatcher(): EventDispatcher {\n        if (!this._eventDispatcher) {\n            this._eventDispatcher = new EventDispatcher();\n            this._eventDispatcher.setGroupName(`${this.prefabName}_${this.node.uuid}`);\n        }\n        return this._eventDispatcher;\n    }\n\n    /**\n     * 注册全局事件\n     * @param event       事件名\n     * @param listener   处理事件的侦听器函数\n     * @param object    侦听函数绑定的this对象\n     */\n    public on(event: string, listener: ListenerFunc, object: any) {\n        this.eventDispatcher.on(event, listener, object);\n    }\n\n    /**\n     * 移除全局事件\n     * @param event      事件名\n     */\n    public off(event: string) {\n        if (this._eventDispatcher) {\n            this._eventDispatcher.off(event);\n        }\n    }\n\n    /** \n     * 触发全局事件 \n     * @param event      事件名\n     * @param args       事件参数\n     */\n    public emit(event: string, ...args: any[]) {\n        this.eventDispatcher.emit(event, ...args);\n    }\n\n    /**\n     * 移除预制内的所有事件\n     */\n    public offAll() {\n        this.eventDispatcher.offAll();\n    }\n\n    protected onDestroy() {\n        // 释放消息对象\n        if (this._eventDispatcher) {\n            this._eventDispatcher.destroy();\n            this._eventDispatcher = null;\n        }\n    }\n}"]}