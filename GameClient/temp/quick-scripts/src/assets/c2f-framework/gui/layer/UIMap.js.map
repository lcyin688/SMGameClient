{"version":3,"sources":["assets/c2f-framework/gui/layer/UIMap.ts"],"names":[],"mappings":";;;;;;;AAAA,cAAc;AACd;IAAA;QAII,UAAU;QACV,WAAM,GAAoB,IAAI,CAAC;QAC/B,UAAU;QACV,UAAK,GAAoB,EAAE,CAAC;IAKhC,CAAC;IAAD,eAAC;AAAD,CAZA,AAYC,IAAA;AAED,uBAAuB;AACvB;IAAA;QACI,cAAc;QACd,YAAY;QACJ,UAAK,GAA0B,IAAI,GAAG,EAAoB,CAAC;IA8DvE,CAAC;IA5DG,cAAc;IACd,oBAAI,GAAJ,UAAK,IAAS;QAAd,iBAkBC;QAjBG,OAAO;QACP,KAAK,IAAI,GAAG,IAAI,IAAI,EAAE;YAClB,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,IAAI,QAAQ,EAAE,CAAC;YACvB,CAAC,CAAC,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,MAAM,CAAC;YACjB,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;YAChB,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;YAClB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;SAC3B;QAED,SAAS;QACT,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,UAAC,KAAe,EAAE,GAAW;YAC5C,KAAK,CAAC,MAAM,GAAG,KAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAE,CAAC;YAC1C,IAAI,KAAK,CAAC,MAAM;gBACZ,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACH,2BAAW,GAAX,UAAY,OAAe,EAAE,KAAa;QACtC,IAAI,KAAK,GAAa,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAE,CAAC;QAC/C,IAAI,GAAG,GAAa,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAE,CAAC;QAE3C,IAAI,KAAK,GAAoB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,IAAI,GAAoB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAE7C,KAAK,CAAC,OAAO,CAAC,UAAA,KAAK;YACf,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,OAAO,CAAC,UAAA,KAAK;YACd,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;IACpD,CAAC;IAED,+BAA+B;IACvB,sBAAM,GAAd,UAAe,KAAe;QAC1B,IAAI,KAAK,GAAe,EAAE,CAAC;QAC3B,IAAI,OAAO,GAAa,KAAK,CAAC;QAC9B,OAAO,OAAO,CAAC,MAAM,IAAI,IAAI,EAAE,EAAS,YAAY;YAChD,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACpB,OAAO,GAAG,OAAO,CAAC,MAAO,CAAC;SAC7B;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,aAAa;IACb,uBAAO,GAAP;QACI,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IACL,YAAC;AAAD,CAjEA,AAiEC,IAAA;AAjEY,sBAAK","file":"","sourceRoot":"/","sourcesContent":["/** 界面关系树节点 */\nclass TreeNode {\n    id!: number;\n    /** 父节点编号 */\n    pid!: number;\n    /** 父节点 */\n    parent: TreeNode | null = null;\n    /** 子节点 */\n    child: Array<TreeNode> = [];\n    /** 界面名 */\n    name!: string;\n    /** 界面代号（用于同一界面有多条路径时） */\n    panel!: string;\n}\n\n/** 用于树形结构两节点之间的寻路功能 */\nexport class UIMap {\n    /** UI层级管理器 */\n    /** 界面节点树 */\n    private nodes: Map<number, TreeNode> = new Map<number, TreeNode>();\n\n    /** 创建UI关系树 */\n    init(data: any) {\n        // 解析数据\n        for (var key in data) {\n            var d = data[key];\n            var n = new TreeNode();\n            n.id = parseInt(key);\n            n.pid = d.parent;\n            n.name = d.name;\n            n.panel = d.panel;\n            this.nodes.set(n.id, n);\n        }\n\n        // 设置节点关系\n        this.nodes.forEach((value: TreeNode, key: number) => {\n            value.parent = this.nodes.get(value.pid)!;\n            if (value.parent)\n                value.parent.child.push(value);\n        });\n    }\n\n    /**\n     * 树节点寻路\n     * @param startId 起始节点编号\n     * @param endId   结束节点编号\n     * @returns \n     */\n    pathFinding(startId: number, endId: number): any {\n        var start: TreeNode = this.nodes.get(startId)!;\n        var end: TreeNode = this.nodes.get(endId)!;\n\n        var close: Array<TreeNode> = this.findUp(start);\n        var open: Array<TreeNode> = this.findUp(end);\n\n        close.forEach(value => {\n            c2f.gui.remove(value.id, true);\n        });\n\n        open.forEach(value => {\n            c2f.gui.open(value.id);\n        });\n\n        return { paths_close: close, paths_open: open };\n    }\n\n    /** 向上寻找子节点直到根节点停止，并返回节点路径数组 */\n    private findUp(start: TreeNode): TreeNode[] {\n        var paths: TreeNode[] = [];\n        var current: TreeNode = start;\n        while (current.parent != null) {        // 父级为空时为根节点\n            paths.push(current);\n            current = current.parent!;\n        }\n        return paths;\n    }\n\n    /** 释放所有节点 */\n    release() {\n        this.nodes.clear();\n    }\n}\n"]}