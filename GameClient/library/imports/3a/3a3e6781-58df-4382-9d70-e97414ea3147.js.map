{"version":3,"sources":["assets/c2f-framework/utils/JsonUtil.ts"],"names":[],"mappings":";;;;;;AACA,WAAW;AACX,IAAI,IAAI,GAAW,cAAc,CAAC;AAElC,WAAW;AACX,IAAI,IAAI,GAAqB,IAAI,GAAG,EAAE,CAAC;AAEvC,gBAAgB;AAChB;IAAA;IAwEA,CAAC;IAvEG;;;OAGG;IACI,YAAG,GAAV,UAAW,IAAY;QACnB,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;YACd,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED;;;;OAIG;IACI,aAAI,GAAX,UAAY,IAAY,EAAE,QAAkB;QACxC,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC;YACd,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;aACxB;YACD,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC;YACtB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,EAAE,UAAC,GAAiB,EAAE,OAAqB;gBAC1E,IAAI,GAAG,EAAE;oBACL,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBACzB;gBACD,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC7B,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YAC1B,CAAC,CAAC,CAAC;SACN;IACL,CAAC;IAED;;;OAGG;IACI,kBAAS,GAAhB,UAAiB,IAAY;QACzB,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAChB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAA;aAC1B;iBACI;gBACD,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC;gBACtB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,SAAS,EAAE,UAAC,GAAiB,EAAE,OAAqB;oBAC1E,IAAI,GAAG,EAAE;wBACL,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;qBACzB;oBACD,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;oBAC7B,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;gBACzB,CAAC,CAAC,CAAC;aACN;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;OAGG;IACI,gBAAO,GAAd,UAAe,IAAY;QACvB,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,CAAC;QACtB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAClB,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC9B,CAAC;IAED,gBAAgB;IACT,cAAK,GAAZ,UAAa,GAAW,EAAE,QAAoB;QAApB,yBAAA,EAAA,eAAoB;QAC1C,IAAI,MAAM,GAAG,QAAQ,CAAC;QACtB,IAAI;YACA,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SAC5B;QAAC,OAAO,KAAK,EAAE;YACZ,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,uBAAuB,EAAE,GAAG,CAAC,CAAC;SACrD;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IACL,eAAC;AAAD,CAxEA,AAwEC,IAAA;AAOD,GAAG,CAAC,KAAK,CAAC,IAAI,GAAG,QAAQ,CAAC","file":"","sourceRoot":"/","sourcesContent":["\n/** 资源路径 */\nvar PATH: string = \"config/game/\";\n\n/** 数据缓存 */\nvar DATA: Map<string, any> = new Map();\n\n/** JSON数据表工具 */\nclass JsonUtil {\n    /**\n     * 通知资源名从缓存中获取一个Json数据表\n     * @param name  资源名\n     */\n    static get(name: string): any {\n        if (DATA.has(name))\n            return DATA.get(name);\n    }\n\n    /**\n     * 通知资源名加载Json数据表\n     * @param name      资源名\n     * @param callback  资源加载完成回调\n     */\n    static load(name: string, callback: Function): void {\n        if (DATA.has(name))\n            callback(DATA.get(name));\n        else {\n            let url = PATH + name;\n            cc.resources.load(url, cc.JsonAsset, (err: Error | null, content: cc.JsonAsset) => {\n                if (err) {\n                    cc.error(err.message);\n                }\n                DATA.set(name, content.json);\n                callback(content.json)\n            });\n        }\n    }\n\n    /**\n     * 异步加载Json数据表\n     * @param name 资源名\n     */\n    static loadAsync(name: string) {\n        return new Promise((resolve, reject) => {\n            if (DATA.has(name)) {\n                resolve(DATA.get(name))\n            }\n            else {\n                let url = PATH + name;\n                cc.resources.load(url, cc.JsonAsset, (err: Error | null, content: cc.JsonAsset) => {\n                    if (err) {\n                        cc.error(err.message);\n                    }\n                    DATA.set(name, content.json);\n                    resolve(content.json)\n                });\n            }\n        });\n    }\n\n    /**\n     * 通过指定资源名释放资源\n     * @param name 资源名\n     */\n    static release(name: string) {\n        let url = PATH + name;\n        DATA.delete(name);\n        cc.resources.release(url);\n    }\n\n    /** 格式化字符串为对象 */\n    static parse(str: string, defaultV: any = null) {\n        let result = defaultV;\n        try {\n            result = JSON.parse(str);\n        } catch (error) {\n            c2f.log.logBusiness('failed to parse json:', str);\n        }\n        return result;\n    }\n}\n\ndeclare global {\n    interface IUtil {\n        json: typeof JsonUtil;\n    }\n}\nc2f.utils.json = JsonUtil;\nexport { };"]}