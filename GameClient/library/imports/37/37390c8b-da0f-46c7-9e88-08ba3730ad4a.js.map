{"version":3,"sources":["assets/c2f-framework/component/ui/scrollList/VirtualItem.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oEAAmE;AAE7D,IAAA,KAAgC,EAAE,CAAC,UAAU,EAA3C,OAAO,aAAA,EAAE,gBAAgB,sBAAkB,CAAC;AAEpD;;GAEG;AAGH;IAAyC,+BAAc;IAAvD;QAAA,qEA0CC;QAzCG,aAAa;QACN,aAAO,GAAW,CAAC,CAAC;QAC3B,WAAW;QACJ,UAAI,GAAQ,IAAI,CAAC;QACxB,6BAA6B;QACtB,YAAM,GAAc,EAAE,CAAC;;IAoClC,CAAC;IAlCa,+BAAS,GAAnB;QACI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,iBAAM,SAAS,WAAE,CAAC;IACtB,CAAC;IAED;;;OAGG;IACI,+BAAS,GAAhB,UAAiB,IAAS;IAC1B,CAAC;IAED;;;OAGG;IACI,qCAAe,GAAtB;QAAuB,eAAmB;aAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;YAAnB,0BAAmB;;IAC1C,CAAC;IAED;;;OAGG;IACI,6BAAO,GAAd;IACA,CAAC;IAED;;;OAGG;IACI,iCAAW,GAAlB;QACI,OAAO,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;IACtC,CAAC;IAzCgB,WAAW;QAF/B,OAAO;QACP,gBAAgB;OACI,WAAW,CA0C/B;IAAD,kBAAC;CA1CD,AA0CC,CA1CwC,+BAAc,GA0CtD;kBA1CoB,WAAW","file":"","sourceRoot":"/","sourcesContent":["import { UIPControlBase } from \"../../../gui/layer/UIPControlBase\";\n\nconst { ccclass, disallowMultiple } = cc._decorator;\n\n/**\n * 虚拟列表的元素组件\n */\n@ccclass\n@disallowMultiple\nexport default class VirtualItem extends UIPControlBase {\n    /** 列表数据索引 */\n    public dataIdx: number = 0;\n    /** 列表数据 */\n    public args: any = null;\n    /** 分层的其余节点，顺序为Others数组的顺序 */\n    public others: cc.Node[] = [];\n\n    protected onDestroy(): void {\n        this.args = null;\n        this.others = [];\n        super.onDestroy();\n    }\n\n    /**\n     * 根据数据刷新item显示\n     * @virtual\n     */\n    public onRefresh(args: any): void {\n    }\n\n    /**\n     * 在onRefresh之后调用，参数为分层显示的节点，参数顺序为Others数组的顺序\n     * @virtual\n     */\n    public onRefreshOthers(...nodes: cc.Node[]): void {\n    }\n\n    /**\n     * 回收item时重置内部状态\n     * @virtual\n     */\n    public onReset(): void {\n    }\n\n    /**\n     * 获取item显示当前数据所需的真实大小（若节点size会根据数据改变，请在此函数内返回准确的size）\n     * @virtual\n     */\n    public getRealSize(): cc.Size {\n        return this.node.getContentSize();\n    }\n}\n"]}