{"version":3,"sources":["assets/c2f-framework/redDot/RedDotMgr.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/** 红点管理 */\n\nclass RedDotMgr {\n    /** 根节点 */\n    public root: c2f.RedDot = null;\n    /** 配置 */\n    protected mapCfg: Map<number, RedDotDef> = null;\n    /** ID -> {optStr -> RedDot}*/\n    protected mapRedDot: Map<number, Map<string, c2f.RedDot>> = null;\n    /** 刷新回调 */\n    protected funcRedDotRequestUpdate: IRedDotRequestUpdate = null;\n    /** 解锁判断 */\n    protected funcModuleIsUnlock: HandlerModuleIsUnlock = null;\n    /** ID -> {optStr ->boolean} 存储一帧结束后要更新的红点 */\n    protected mapPreUpdate: Map<number, Map<string, boolean>> = null;\n    //红点预制体\n    protected _dotPrefab: cc.Prefab = null;\n    public set dotPrefab(value: cc.Prefab) {\n        if (this._dotPrefab == value) {\n            return;\n        }\n        if (this._dotPrefab) {\n            this._dotPrefab.decRef();\n        }\n        this._dotPrefab = value;\n        this._dotPrefab.addRef();\n    }\n    public get dotPrefab() {\n        return this._dotPrefab;\n    }\n\n    constructor() {\n        this.mapRedDot = new Map();\n        this.mapPreUpdate = new Map();\n        this.mapCfg = new Map();\n    }\n\n    public clear(): void {\n        this.mapRedDot.forEach((v, k) => {\n            v.forEach((vv, kk) => {\n                vv.clear();\n            })\n            v.clear();\n        })\n        this.mapRedDot.clear();\n        this.mapPreUpdate.clear();\n        this.root?.destroy();\n        if (this._dotPrefab) {\n            this._dotPrefab.decRef();\n            this._dotPrefab = null;\n        }\n    }\n\n    private getRedCfg(data: any[]) {\n        let cfg: RedDotDef = {\n            id: data.length > 0 ? data[0] : 0,\n            moduleId: data.length > 1 ? data[1] : 0,\n            name: data.length > 2 ? data[2] : '',\n            parent: data.length > 3 ? data[3] : 0,\n            showType: data.length > 4 ? data[4] : 1,\n            offsetX: data.length > 5 ? data[5] : 0,\n            offsetY: data.length > 6 ? data[6] : 0\n        }\n        return cfg;\n    }\n\n    private getOptStr<Options>(opt: Options) {\n        if (!opt) {\n            return 'null';\n        } else {\n            return JSON.stringify(opt);\n        }\n    }\n\n    private getRedDot<Options>(id: number, opt: Options) {\n        let ret: c2f.RedDot = null;\n        let mapTemp = this.mapRedDot.get(id);\n        if (mapTemp) {\n            let optStr = this.getOptStr(opt);\n            ret = mapTemp.get(optStr)\n        }\n        return ret;\n    }\n\n    private getRedDotByIdKey(id: number, optStr: string) {\n        let ret: c2f.RedDot = null;\n        let mapTemp = this.mapRedDot.get(id);\n        if (mapTemp) {\n            ret = mapTemp.get(optStr)\n        }\n        return ret;\n    }\n\n    /** 初始化红点配置信息 */\n    public initWithData(data: any[], rootId: number, prefab: cc.Prefab) {\n        if (this.mapRedDot.size > 0) {\n            console.warn(`RedDotMgr-> 请不要重复调用红点初始化`);\n            return;\n        }\n        if (!data?.length) {\n            console.warn(`RedDotMgr-> 红点初始化失败，数据不存在`);\n            return;\n        }\n        this.clear();\n        this.dotPrefab = prefab;\n\n        for (let i = 0; i < data.length; i++) {\n            const info = this.getRedCfg(data[i]);\n            this.mapCfg.set(info.id, info);\n            this.createRedDot(info, null);\n        }\n\n        // 设置根节点，如果没有被创建，则创建一个默认的   \n        this.root = this.getRedDot(rootId, null) ?? this.createRedDot(\n            {\n                id: rootId,\n                moduleId: 0,\n                name: 'main',\n                parent: 0,\n                showType: c2f.RedDot.ShowType.Normal,\n                offsetX: 0,\n                offsetY: 0\n            }, null);\n\n        // 对每一个节点设置 父节点\n        this.mapRedDot.forEach((mapSub) => {\n            mapSub.forEach((v, k) => {\n                this.setRedDotParent(v, null);\n            })\n        });\n        // 进行一次全部节点的更新\n        if (this.funcRedDotRequestUpdate) {\n            this.refreshAllRedDot();\n        }\n    }\n\n    /**\n     * 创建红点\n     * @template Options\n     * @param {RedDotDef} info\n     * @param {Options} options 增加一个选项，在更新的时候会传给更新函数\n     */\n    private createRedDot<Options>(info: RedDotDef, options: Options) {\n        if (!info) {\n            return null;\n        }\n        let dot = new c2f.RedDot(info, options);\n        const optStr = dot.key.getOptStr();\n        let find = this.mapRedDot.get(info.id);\n        if (find) {\n            if (find.get(optStr)) {\n                console.warn(`RedDotMgr-> [${dot.id}][${optStr}] 重复创建`);\n                return null;\n            } else {\n                find.set(optStr, dot);\n            }\n        } else {\n            let subMap = new Map();\n            subMap.set(optStr, dot);\n            this.mapRedDot.set(info.id, subMap);\n        }\n        // 监听指定 id 的红点\n        dot.on(c2f.RedDot.Event.EVENT_NEED_UPDATE, this.onEventToUpdate, this);\n        dot.on(c2f.RedDot.Event.EVENT_ADD_DISPLAY, this.onEventAddDisplay, this);\n        dot.on(c2f.RedDot.Event.EVENT_REMOVE_DISPLAY, this.onEventRemovedDisplay, this);\n        return dot;\n    }\n\n    /**\n     * 红点设置父节点\n     * @param {RedPoint} dot\n     */\n    private setRedDotParent<Options>(dot: c2f.RedDot, parentOpt: Options) {\n        let parent: c2f.RedDot = null;\n        let parOpt = this.getOptStr(parentOpt);\n        let parMap = this.mapRedDot.get(dot.cfg.parent);\n        if (parMap) {\n            parent = parMap.get(parOpt);\n        }\n        if (!parent) {\n            if (dot.id !== this.root.id) {\n                console.error(`RedDotMgr-> ${dot.id} 没有父节点`);\n            }\n            return;\n        }\n        if (dot.id === parent.id) {\n            console.warn(`RedDotMgr-> ${dot.id} 无法设置自己为自己的父节点`);\n            return;\n        }\n        parent.addChild(dot);\n    }\n\n    /**\n     * 给指定红点设置显示节点\n     * @param {number} id\n     * @param {cc.Node} container\n     * @param [selfOpt=null]  自身红点参数\n     * @param [parentOpt=null] 父节点红点参数\n     * @param [tmpUpdateCb=null] 本地刷新函数·仅用于界面内临时红点·谨慎使用\n     */\n    public setDisplayProxy<Options>(id: number, container: cc.Node, selfOpt: Options = null, parentOpt: Options = null, tmpUpdateCb: Function = null) {\n        if (!container || !container.isValid) {\n            console.error(`RedDotMgr-> 红点宿主节点错误`);\n            return;\n        }\n        let mapSubDot = this.mapRedDot.get(id);\n        if (!mapSubDot) {\n            mapSubDot = new Map();\n            this.mapRedDot.set(id, mapSubDot);\n        }\n        let dotKey = new c2f.DotKey(id, selfOpt);\n        const optStr = this.getOptStr(selfOpt)\n        let redDot = mapSubDot.get(optStr);\n        //混合参数的dot可能没在dotMap中，需创建\n        if (!redDot) {\n            let cfg = this.mapCfg.get(id);\n            if (!cfg) {\n                console.error(`RedDotMgr-> 没有指定红点配置 ${id}`);\n                return;\n            }\n            redDot = this.createRedDot(cfg, selfOpt);\n            this.setRedDotParent(redDot, parentOpt);\n        }\n\n        let oriKey: c2f.DotKey = null;\n        let dstDisplay: c2f.RedDotComp = null;\n        let exists = c2f.utils.view.getChildrenByComponent(container, c2f.RedDotComp);\n        if (exists && exists.length > 0) {\n            let exDisplay = exists[0];\n            oriKey = exDisplay.getDotKey();\n            let compInDot = redDot.hasDisplay(exDisplay)\n            if (compInDot && oriKey.toString() == dotKey.toString()) {\n                this.addPreupdateRedDot(redDot, false);\n                return;\n            } else {\n                exDisplay.node.parent = container;\n                dstDisplay = exDisplay;\n            }\n        } else {\n            let newNode = c2f.res.instantiate(this.dotPrefab, container);\n            newNode.parent = container;\n            newNode.zIndex = 99;\n            dstDisplay = newNode.getComponent(c2f.RedDotComp);\n        }\n        if (dstDisplay) {\n            dstDisplay.setShowType(redDot.showType);\n            dstDisplay.setPosOffset(redDot.offset);\n            dstDisplay.amendDotPos();\n            dstDisplay.setDotKey(redDot.key);\n            dstDisplay.updateCount(redDot.count);\n            dstDisplay.setDisplay(redDot.enabled && redDot.count > 0); // 红点启用并且数量大于0\n            redDot.tmpUpdateHandler = tmpUpdateCb;\n            redDot.addDisplay(dstDisplay);\n            if (oriKey) {\n                this.removeDisplayByKey(oriKey, dstDisplay);\n            }\n        }\n        this.addPreupdateRedDot(redDot, false);\n    }\n\n    /**\n     * 设置请求更新接口\n     * @param {IRedDotRequestUpdate} funcRequestUpdate\n     */\n    public setRedDotHandlers(funcRequestUpdate: IRedDotRequestUpdate, funcCheckUnlock: HandlerModuleIsUnlock) {\n        this.funcRedDotRequestUpdate = funcRequestUpdate;\n        this.funcModuleIsUnlock = funcCheckUnlock;\n        if (funcRequestUpdate && this.mapRedDot.size > 0) {\n            this.refreshAllRedDot();\n        }\n    }\n\n\n\n    /**\n     * 直接设置指定红点的计数\n     * @param {number} id\n     * @param {number} count\n     */\n    public setCount<Options>(id: number, opt: Options, count: number) {\n        let redDot = this.getRedDot(id, opt);\n        if (redDot) {\n            redDot.setCount(count);\n        } else {\n            console.warn(`RedDotMgr-> setCount 没有找到指定红点: ${id}, ${opt}`);\n        }\n    }\n\n    /** 立即将预更新列表中的刷新了 */\n    private immediateUpdatePreList() {\n        this.mapPreUpdate.forEach((subMap, id) => {\n            subMap.forEach((fullTree, k) => {\n                let redDot = this.getRedDotByIdKey(id, k);\n                if (redDot) {\n                    this.refreshRedDot(redDot, fullTree);\n                    redDot.toRefreshParent();\n                }\n            })\n            subMap.clear();\n        });\n        this.mapPreUpdate.clear();\n    }\n\n    /** 添加预更新的红点·有红点实体且可见时的才更新 */\n    private addPreupdateRedDot(dot: c2f.RedDot, fullTree = false) {\n        let subMap = this.mapPreUpdate.get(dot.key.id);\n        if (!subMap) {\n            subMap = new Map();\n            this.mapPreUpdate.set(dot.key.id, subMap);\n        }\n        const optStr = dot.key.getOptStr();\n        if (subMap.has(optStr)) {\n            let param = subMap.get(optStr);\n            if (param != fullTree) {\n                subMap.set(optStr, param || fullTree);\n            }\n            return;\n        }\n        subMap.set(optStr, fullTree);\n        cc.director.once(cc.Director.EVENT_AFTER_UPDATE, this.immediateUpdatePreList, this);\n    }\n\n    /** 更新所有红点，性能消耗较大 */\n    public refreshAllRedDot() {\n        if (!this.funcRedDotRequestUpdate) {\n            console.warn(`RedDotMgr-> 没有设置红点更新方法`);\n            return;\n        }\n        // 修改为 update 后更新\n        this.addPreupdateRedDot(this.root, true);\n    }\n\n    /** 更新home点 */\n    public refreshRedDotById(id: number) {\n        if (!this.funcRedDotRequestUpdate) {\n            console.warn(`RedDotMgr-> 没有设置红点更新方法，无法更新红点 [${id}]`);\n            return;\n        }\n        let mapRedDot = this.mapRedDot.get(id);\n        if (!mapRedDot) {\n            return;\n        }\n        mapRedDot.forEach((v, k) => {\n            this.addPreupdateRedDot(v, false);\n        })\n    }\n\n    /**\n     * 主动更新某个红点\n     * @param {number} id  红点id\n     * @param {boolean} [fullTree = false]  是否更新当前红点下所有子节点\n     */\n    public refreshRedDotByKey(key: c2f.DotKey, fullTree: boolean = false) {\n        if (!this.funcRedDotRequestUpdate) {\n            console.warn(`RedDotMgr-> 没有设置红点更新方法，无法更新红点 [${key.id}]`);\n            return;\n        }\n        let dot = this.getRedDot(key.id, key.opt);\n        if (!dot) {\n            console.warn(`RedDotMgr-> 没有找到指定红点: ${key}`);\n            return;\n        }\n        // 根节点 和 数字显示的红点 必须检测所有子节点\n        if (dot.showType === c2f.RedDot.ShowType.Number || key.id === this.root.id) {\n            fullTree = true;\n        }\n        // 修改为 update 后更新\n        this.addPreupdateRedDot(dot, fullTree);\n    }\n\n    /** 红点是否解锁 */\n    private checkRedDotIsUnlock(dotId: number) {\n        let isUnlock = true;\n        if (this.funcModuleIsUnlock) {\n            let checkId = dotId;\n            while (checkId) {\n                let breakCheck = false;\n                let conf = this.mapCfg.get(checkId);\n                if (conf) {\n                    let ret = this.funcModuleIsUnlock(conf.moduleId, conf.id);\n                    if (ret) {\n                        checkId = conf.parent;\n                    } else {\n                        isUnlock = false;\n                        breakCheck = true;\n                    }\n                } else {\n                    breakCheck = true;\n                }\n                if (breakCheck) {\n                    break;\n                }\n            }\n        }\n        return isUnlock;\n    }\n\n    /**\n     * 更新红点，递归\n     * @param {RedDot} redDot\n     * @param {boolean} [fullTree=false]\n     */\n    private refreshRedDot(redDot: c2f.RedDot, fullTree: boolean = false): boolean {\n        if (!redDot) {\n            return false;\n        }\n        let refresh = false;\n        if (redDot.isLeaf()) {\n            let count = 0;\n            if (redDot.tmpUpdateHandler) {\n                count = redDot.tmpUpdateHandler(redDot.cfg.parent, redDot.id, redDot.options);\n            } else {\n                let isUnlock = this.checkRedDotIsUnlock(redDot.cfg.id);\n                if (isUnlock) {\n                    count = this.funcRedDotRequestUpdate.requestUpdate(redDot.cfg.parent, redDot.id, redDot.options);\n                }\n            }\n            if (count >= 0) {\n                redDot.setCount(count);\n            }\n            refresh = count > 0;\n        } else {\n            for (let i = 0; i < redDot.children.length; i++) {\n                const child = redDot.children[i];\n                let check = this.refreshRedDot(child, fullTree);\n                // 在不是检查整棵树的情况下，只要检查到有红点就停止检测\n                if (check) {\n                    refresh = true;\n                    if (!fullTree) {\n                        break;\n                    }\n                }\n            }\n            redDot.toRefresh();\n        }\n        return refresh;\n    }\n\n    /**\n     * 销毁指定红点RedDot数据\n     * @param {number} id\n     * @param {Options} opt\n     */\n    public destroyRedDot<Options>(id: number, opt: Options) {\n        let mapSub = this.mapRedDot.get(id);\n        if (!mapSub) {\n            return;\n        }\n        let optStr = this.getOptStr(opt);\n        if (mapSub.has(optStr)) {\n            let dot = mapSub.get(optStr);\n            dot.destroy();\n            mapSub.delete(optStr);\n            if (mapSub.size <= 0) {\n                this.mapRedDot.delete(id);\n            }\n        }\n    }\n\n    /** 移除组件映射数据：红点组件onDestroy时同步清除Display数据 */\n    public deleteDataByCompDestory(dotKey: c2f.DotKey, dotComp: c2f.RedDotComp) {\n        let mapSub = this.mapRedDot.get(dotKey.id);\n        if (!mapSub) {\n            return;\n        }\n        let optStr = this.getOptStr(dotKey.opt);\n        if (mapSub.has(optStr)) {\n            let dot = mapSub.get(optStr);\n            dot.deleteDisplayDataOnly(dotComp);\n        }\n    }\n\n    /** 移除小红点组件及Display数据 */\n    public removeDisplayByKey(dotKey: c2f.DotKey, dotComp: c2f.RedDotComp) {\n        let mapSub = this.mapRedDot.get(dotKey.id);\n        if (mapSub) {\n            let optStr = this.getOptStr(dotKey.opt);\n            if (mapSub.has(optStr)) {\n                let dot = mapSub.get(optStr);\n                dot.deleteDisplayDataOnly(dotComp);\n            } else {\n                cc.warn('dont find in mapRedDot by optStr:', dotKey, optStr);\n            }\n        } else {\n            cc.warn('dont find in mapRedDot by id', dotKey.id);\n        }\n    }\n\n    /// ---------------- 事件响应 ------------------------>>>\n    /** 刷新某ID红点 */\n    private onEventToUpdate(event: string, ...params) {\n        if (params.length <= 0) {\n            return;\n        }\n        let key: c2f.DotKey = params[0];\n        this.refreshRedDotByKey(key);\n    }\n\n    /** 给某ID红点绑定外观节点 */\n    private onEventAddDisplay(event: string, ...params) {\n        if (params.length <= 1) {\n            return;\n        }\n        let key: c2f.DotKey = params[0];\n        let container = params[1];\n        this.setDisplayProxy(key.id, container, key.opt, null);\n    }\n\n    /** 删除RedDot数据 */\n    private onEventRemovedDisplay(event: string, ...params) {\n        if (params.length <= 0) {\n            return;\n        }\n        let key: c2f.DotKey = params[0];\n        let redDot = this.getRedDot(key.id, key.opt);\n        if (!redDot) {\n            return;\n        }\n        if (redDot.isLeaf() && redDot.getDisplayCnt() <= 0 && key.getOptStr() != 'null') {\n            this.destroyRedDot(key.id, key.opt);\n        }\n    }\n\n    /// ---------------- 事件响应 ------------------------<<<\n\n\n    private static _instance: RedDotMgr = null\n    public static getInstance(): RedDotMgr {\n        if (!this._instance) {\n            this._instance = new RedDotMgr();\n        }\n        return this._instance;\n    }\n}\n\ndeclare global {\n    interface IC2F {\n        dotMgr: RedDotMgr;\n    }\n}\n\nc2f.dotMgr = RedDotMgr.getInstance();\nexport { };"]}