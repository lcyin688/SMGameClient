{"version":3,"sources":["assets/c2f-framework/component/shader/ShaderCyclicRLabel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { C2FConst } from \"../../define/C2FConst\";\n\nconst { ccclass, requireComponent, menu, property } = cc._decorator;\n@ccclass\n@menu('c2f/shader/ShaderCyclicRLabel')\n@requireComponent(cc.Label)\nexport default class ShaderCyclicRLabel extends cc.Component {\n\n    @property({ tooltip: \"文本显示的宽度阈值\" })\n    maxWidth: number = 0;\n\n    @property({ tooltip: \"滑动显示\" })\n    moveTxt: boolean = true;\n\n    @property({ tooltip: \"缩放匹配\" })\n    scaleMatch: boolean = false;\n\n    @property({\n        tooltip: \"滑动显示移动速度\",\n        visible() {\n            return this.moveTxt;\n        }\n    })\n    moveSpeed: number = 100;\n\n    @property({ tooltip: \"将单字单行显示转为竖直水平的语言种类，以|分隔\" })\n    vTransH: boolean = false;\n\n    @property({\n        tooltip: \"转为竖直水平的语言种类，以|分隔\",\n        visible() {\n            return this.vTransH;\n        }\n    })\n    transLG: string = `${C2FConst.LanguageKey.en}|${C2FConst.LanguageKey.th}`;\n\n    //原始缩放\n    private oriScale = 1.0;\n    //\n    private oriPos: cc.Vec2 = cc.Vec2.ZERO;\n    private oriMat: cc.Material = null;\n    private oriCacheMode: cc.Label.CacheMode = cc.Label.CacheMode.NONE;\n\n    private duration: number = 0;\n    private useShader: boolean = false;\n\n    onLoad() {\n        this.duration = 0;\n        this.oriPos = this.node.getPosition();\n        this.oriScale = this.node.scale;\n        this.node.on(cc.Node.EventType.SIZE_CHANGED, this.onLabelSizeChanged.bind(this));\n    }\n\n    start() {\n        let labelComp = this.node.getComponent(cc.Label);\n        this.oriCacheMode = labelComp.cacheMode;\n        this.oriMat = labelComp.getMaterial(0);\n\n        this.onLabelSizeChanged();\n    }\n\n    /** 是否把竖排改为旋转90横排 */\n    private isNeedTransVH() {\n        let need = false;\n        if (this.vTransH) {\n            let lgs = this.transLG.split('|');\n            if (lgs.length > 0 && lgs.indexOf(c2f.language.current) >= 0) {\n                need = true;\n            }\n        }\n        return need;\n    }\n\n    /** 是否需要滚动 */\n    private isNeedScroll() {\n        let nodeSize = this.node.getContentSize();\n        if (nodeSize.width > this.maxWidth) {\n            return true;\n        }\n        return false;\n    }\n\n    private onLabelSizeChanged() {\n        cc.log(`label size: w:${this.node.width} h:${this.node.height}`);\n        if (this.isNeedTransVH()) {\n            this.transferV2H();\n        }\n        if (this.moveTxt) {\n            this.updateMoveShow();\n        }\n        if (this.scaleMatch) {\n            this.node.scale = Math.min(this.oriScale, this.maxWidth / Math.max(1, this.node.width));\n        }\n    }\n\n    private moveLabelWithShader() {\n        let txtLabel = this.node.getComponent(cc.Label);\n        if (txtLabel.cacheMode != cc.Label.CacheMode.NONE) {\n            txtLabel.cacheMode = cc.Label.CacheMode.NONE;\n        }\n        let resUrl = 'commonRes/shader/materials/cyclicRollingTxt';\n        c2f.res.load(C2FConst.fwBundleName, resUrl, cc.Material, null, (err: Error | null, res: cc.Material) => {\n            if (err) {\n                cc.error(err);\n                return;\n            }\n            if (txtLabel && txtLabel.isValid) {\n                let variant1 = txtLabel.setMaterial(0, res);\n                if (variant1) {\n                    variant1.setProperty('anchorX', this.node.anchorX);\n                    variant1.setProperty('showWidth', this.maxWidth / this.node.width);\n                    variant1.setProperty('moveSpeed', Math.max(1.0, (this.node.width - this.maxWidth) / (this.moveSpeed || 100)));\n                    //重置状态\n                    this.duration = 0;\n                    this.useShader = true;\n                }\n            }\n        });\n    }\n\n    private updateMoveShow() {\n        //重置shader使用状态\n        this.useShader = false;\n        //只有普通模式才支持滑动显示\n        let txtLabel = this.node.getComponent(cc.Label);\n        if (txtLabel.overflow != cc.Label.Overflow.NONE) {\n            return;\n        }\n        if (!this.isNeedScroll()) {\n            if (this.oriMat) {\n                txtLabel.setMaterial(0, this.oriMat);\n                txtLabel.cacheMode = this.oriCacheMode;\n            }\n            return;\n        }\n        //正确设置宽度才支持\n        if (this.maxWidth <= 0) {\n            return;\n        }\n        this.moveLabelWithShader();\n    }\n\n    private transferV2H() {\n        if (!this.vTransH) {\n            return;\n        }\n        let txtLabel = this.node.getComponent(cc.Label);\n        if (txtLabel.overflow != cc.Label.Overflow.RESIZE_HEIGHT) {\n            return;\n        }\n        //暂时不需要缓存原始信息\n        txtLabel.overflow = cc.Label.Overflow.NONE;\n        txtLabel.node.angle = 90;\n        let oriAnchor = txtLabel.node.getAnchorPoint();\n        txtLabel.node.anchorX = oriAnchor.y;\n        txtLabel.node.anchorY = oriAnchor.x;\n    }\n\n    public update(dt: number) {\n        if (this.useShader) {\n            this.duration += dt;\n            let txtLabel = this.node.getComponent(cc.Label);\n            let variant1 = txtLabel.getMaterial(0);\n            if (variant1) {\n                variant1.setProperty('curTick', this.duration);\n            }\n        }\n    }\n}"]}