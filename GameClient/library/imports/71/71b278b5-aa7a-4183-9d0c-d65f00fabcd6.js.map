{"version":3,"sources":["assets/c2f-framework/core/event/EventDispatcher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AACA,2CAA0C;AAE1C,8BAA8B;AAC9B;IAAA;QACY,UAAK,GAAW,IAAI,CAAC;QACnB,SAAI,GAAsB,IAAI,CAAC;IAwD7C,CAAC;IAtDG,aAAa;IACN,sCAAY,GAAnB,UAAoB,IAAY;QAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IAED;;;;;OAKG;IACI,4BAAE,GAAT,UAAU,KAAa,EAAE,QAAsB,EAAE,MAAW;QACxD,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YACnB,IAAI,CAAC,IAAI,GAAG,IAAI,uBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC1C;QACD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC1C,CAAC;IAED;;;OAGG;IACI,6BAAG,GAAV,UAAW,KAAa;QACpB,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;SACxB;IACL,CAAC;IAED;;;;OAIG;IACI,8BAAI,GAAX,UAAY,KAAa;;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACrC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,EAAE;YACnB,IAAI,CAAC,IAAI,GAAG,IAAI,uBAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC1C;QACD,CAAA,KAAA,IAAI,CAAC,IAAI,CAAA,CAAC,IAAI,2BAAC,KAAK,GAAK,IAAI,GAAE;IACnC,CAAC;IAED,eAAe;IACR,gCAAM,GAAb;QACI,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;SACrB;IACL,CAAC;IAED;;OAEG;IACI,iCAAO,GAAd;QACI,IAAI,CAAC,MAAM,EAAE,CAAC;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IACL,sBAAC;AAAD,CA1DA,AA0DC,IAAA;AA1DY,0CAAe","file":"","sourceRoot":"/","sourcesContent":["import { ListenerFunc } from \"./EventDefine\";\nimport { EventGroup } from \"./EventGroup\";\n\n/* 事件对象基类，继承该类将拥有发送和接送事件的能力 */\nexport class EventDispatcher {\n    private group: string = null;\n    protected _msg: EventGroup | null = null;\n\n    /** 设置分组名称 */\n    public setGroupName(name: string) {\n        this.group = name;\n    }\n\n    /**\n     * 注册全局事件\n     * @param event     事件名\n     * @param listener  处理事件的侦听器函数\n     * @param object    侦听函数绑定的作用域对象\n     */\n    public on(event: string, listener: ListenerFunc, object: any) {\n        if (this._msg == null) {\n            this._msg = new EventGroup(this.group);\n        }\n        this._msg.on(event, listener, object);\n    }\n\n    /**\n     * 移除全局事件\n     * @param event      事件名\n     */\n    public off(event: string) {\n        if (this._msg) {\n            this._msg.off(event);\n        }\n    }\n\n    /** \n     * 触发全局事件 \n     * @param event      事件名\n     * @param args       事件参数\n     */\n    public emit(event: string, ...args: any[]) {\n        if (this._msg == null) {\n            this._msg = new EventGroup(this.group);\n        }\n        this._msg.emit(event, ...args);\n    }\n\n    /** 移除所有事件监听 */\n    public offAll() {\n        if (this._msg) {\n            this._msg.clear();\n        }\n    }\n\n    /**\n     * 销毁事件对象\n     */\n    public destroy() {\n        this.offAll();\n        this._msg = null;\n    }\n}"]}