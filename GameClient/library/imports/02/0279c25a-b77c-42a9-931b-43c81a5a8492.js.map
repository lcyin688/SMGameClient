{"version":3,"sources":["assets/c2f-framework/utils/NodeUtil.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/** 节点对象工具 */\nclass NodeUtil {\n\n    //-----------------------------------------------------------\n    /** 临时变量处理：防止产生大量临时对象，z轴<0时，可释放 */\n    static arrVecTmp: cc.Vec3[] = [];\n    static getFreeVecTmp() {\n        let idx = this.arrVecTmp.findIndex((a) => { return a.z < 0 });\n        if (idx < 0) {\n            let newTmp = cc.v3(0, 0, 0);\n            this.arrVecTmp.push(newTmp);\n            return newTmp;\n        } else {\n            let one = this.arrVecTmp[idx];\n            one.x = 0;\n            one.y = 0;\n            one.z = 0;\n            return one;\n        }\n    }\n    /** 将临时vec变量回收 */\n    static releaseVecTmp(tmp: cc.Vec3) {\n        if (tmp) {\n            tmp.z = -1;\n        }\n    }\n    /** 清空临时对象列表 */\n    static clearVecTmp() {\n        this.arrVecTmp = [];\n    }\n\n    /** 获得节点坐标，返回的是缓存临时对象，使用完后将z设置为-1 */\n    static getNodePosition(node: cc.Node, out?: cc.Vec2) {\n        if (!out) {\n            out = cc.v2(0, 0);\n        }\n        out = node.getPosition(out);\n        return out;\n    }\n\n    /** 获得世界坐标，返回的是缓存临时对象，使用完后将z设置为-1 */\n    static getNodeWorldPosition(node: cc.Node, out?: cc.Vec3) {\n        if (!out) {\n            out = cc.v3(0, 0);\n        }\n        node.convertToWorldSpaceAR(cc.Vec3.ZERO, out);\n        return out;\n    }\n\n    /**\n     * 节点位置偏移\n     * @param node 目标节点\n     * @param offset 偏移量\n     */\n    static offestNodePos(node: cc.Node, x: number, y: number, z: number) {\n        let tmp = this.getNodePosition(node);\n        tmp.x += x;\n        tmp.y += y;\n        node.setPosition(tmp);\n    }\n\n    /**\n     * 节点1到节点2连线与x轴方向的夹角\n     * @param node1 节点1\n     * @param node1 节点2\n     */\n    static getTwoNodeAngle(node1: cc.Node, node2: cc.Node) {\n        let pos1 = this.getNodeWorldPosition(node1);\n        let pos2 = this.getNodeWorldPosition(node2);\n        let angle: number = c2f.utils.vec.angleEx(pos1, pos2);\n        this.releaseVecTmp(pos1);\n        this.releaseVecTmp(pos2);\n        return angle;\n    }\n\n    /**\n     * 节点node在panel下的坐标\n     * @param node 节点1\n     * @param panel 节点2\n     */\n    static getNodeInPanelPos(node: cc.Node, panel: cc.Node) {\n        let posW = this.getNodeWorldPosition(node);\n        let posL = panel.convertToNodeSpaceAR(posW);\n        this.releaseVecTmp(posW);\n        return posL;\n    }\n}\n\ndeclare global {\n    interface IUtil {\n        node: typeof NodeUtil;\n    }\n}\nc2f.utils.node = NodeUtil;\nexport { };"]}