{"version":3,"sources":["assets/c2f-framework/mvvm/StringFormat.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { C2FConst } from \"../define/C2FConst\";\n\n/**\n * 数值格式化函数, 通过语义解析自动设置值的范围\n *     //整数\n * 1:def(0)//显示一个默认值\n */\nclass StringFormat {\n\n\n    deal(value: number | string, format: string): string {\n        if (format === '') return value as string;\n\n        format = format.toLowerCase().trim();//不区分大小\n        let match_func = format.match(/^[a-z|A-Z]+/gi);//匹配到 format 中的 函数名\n        let match_num = format.match(/\\d+$/gi);   //匹配到 format 中的参数\n        let func: string = '';\n        let num: number;\n        let res: number | string = '';\n\n        if (match_func) func = match_func[0];\n        if (match_num) num = parseInt(match_num[0]);\n\n        if (typeof value == 'number') {\n            switch (func) {\n                case 'int': res = this.int(value); break;\n                case 'fix': res = this.fix(value, num); break;\n                case 'kmbt': res = this.KMBT(value); break;\n                case 'per': res = this.per(value, num); break;\n                case 'sep': res = this.sep(value); break;\n\n                default:\n                    break;\n            }\n\n        } else {\n            switch (func) {\n                case 'limit': res = this.limit(value, num); break;\n\n                default:\n                    break;\n            }\n            res = value;\n        }\n\n        return res as string;\n\n\n    }\n\n    //将数字按分号显示\n    private sep(value: number) {\n        let num = Math.round(value).toString();\n        return num.replace(new RegExp('(\\\\d)(?=(\\\\d{3})+$)', 'ig'), \"$1,\");\n    }\n\n    //将数字按分显示 00:00 显示 （ms制）\n    private time_m(value: number) {\n        //todo\n    }\n\n    //将数字按秒显示 00:00:00 显示 （ms制）\n    private time_s(value: number) {\n        //todo\n    }\n\n    //将数字按 0:00:00:000 显示 （ms制）\n    private time_ms(value: number) {\n        //todo\n    }\n\n    //将时间戳显示为详细的内容\n    private timeStamp(value: number) {\n        //todo\n        return new Date(value).toString()\n    }\n\n    /** [value:int] 将取值0~1 变成 1~100,可以指定修饰的小数位数 */\n    private per(value: number, fd: number) {\n        return Math.round(value * 100).toFixed(fd);\n    }\n\n    /** [value:int] 将取值变成整数 */\n    private int(value: number) {\n        return Math.round(value);\n    }\n\n    /** [value:fix2]数值转换为小数*/\n    private fix(value: number, fd: number) {\n        return value.toFixed(fd)\n    }\n\n    /** [value:limit3]字符串长度限制 */\n    private limit(value: string, count: number) {\n        return value.substring(0, count);\n    }\n\n    /** 将数字缩短显示为KMBT单位 大写,目前只支持英文 */\n    private KMBT(value: number, lang: string = 'en') {\n        //10^4=万, 10^8=亿,10^12=兆,10^16=京，\n        let counts = [1000, 1000000, 1000000000, 1000000000000];\n        let units = ['', 'K', 'M', 'B', 'T'];\n\n        switch (lang) {\n            case C2FConst.LanguageKey.zh:\n                //10^4=万, 10^8=亿,10^12=兆,10^16=京，\n                let counts = [10000, 100000000, 1000000000000, 10000000000000000];\n                let units = ['', '万', '亿', '兆', '京'];\n                break;\n\n            default:\n                break;\n        }\n\n        return this.compressUnit(value, counts, units, 2);\n    }\n\n\n    //压缩任意单位的数字，后缀加上单位文字\n    private compressUnit(value, valueArr: number[], unitArr: string[], fixNum: number = 2): string {\n        let counts = valueArr;\n        let units = unitArr;\n        let res: string;\n        let index;\n        for (index = 0; index < counts.length; index++) {\n            const e = counts[index];\n            if (value < e) {\n                if (index > 0) {\n                    res = (value / counts[index - 1]).toFixed(fixNum);\n                } else {\n                    res = value.toFixed(0);\n                }\n                break;\n            }\n\n        }\n        return res + units[index];\n    }\n\n\n\n}\n\n/**格式化处理函数 */\nexport let StringFormatFunction = new StringFormat();"]}