{"version":3,"sources":["assets/c2f-framework/hack/SpineHack.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["if (!CC_EDITOR) {\n    if (!sp.Skeleton.prototype[\"__$CCSPSpineHack$__\"]) {\n        sp.Skeleton.prototype[\"__$CCSPSpineHack$__\"] = true;\n\n        sp.Skeleton.prototype.changeSkeletonData = async function (url: string, endCb: Function) {\n            this.dynamicUrl = url;\n            if (url == this.loadingUrl) {\n                endCb && endCb();\n            } else {\n                let needReload = true;\n                let curUuid = this.skeletonData ? this.skeletonData['_uuid'] : null;\n                if (curUuid) {\n                    let urlInfo = c2f.res.parseUrl(url);\n                    let bundle: cc.AssetManager.Bundle = cc.assetManager.getBundle(urlInfo.bundle);\n                    if (bundle) {\n                        let resInfo = bundle.getInfoWithPath(urlInfo.loadUrl);\n                        if (resInfo.uuid == curUuid) {\n                            needReload = false;\n                        }\n                    }\n                }\n                if (needReload) {\n                    this.loadingUrl = url;\n                    let result = c2f.res.getRes(url, sp.SkeletonData) || await c2f.res.loadOne(url, sp.SkeletonData);\n                    this.loadingUrl = \"\";\n                    if (this.dynamicUrl != url || !result || !this.isValid) {\n                        return;\n                    }\n                    if (this.skeletonData === result) {\n                        endCb && endCb();\n                        return;\n                    }\n                    result.addRef();\n                    if (this.dynamicAsset) {\n                        this.dynamicAsset.decRef();\n                    }\n                    this.dynamicAsset = result;\n                    this.skeletonData = result;\n                }\n                endCb && endCb();\n            }\n        };\n\n        //@ts-ignore\n        sp.Skeleton.prototype.engineOnDestory = sp.Skeleton.prototype.onDestroy;\n        //@ts-ignore\n        sp.Skeleton.prototype.onDestroy = function () {\n            if (this.dynamicAsset) {\n                this.dynamicAsset.decRef(true);\n                this.dynamicAsset = null;\n            }\n            this.dynamicUrl = '';\n            this.loadingUrl = '';\n            if (this.engineOnDestory) this.engineOnDestory();\n        };\n    }\n}\n\ndeclare module sp {\n    interface Skeleton {\n        dynamicAsset: any;\n        dynamicUrl: string;\n        loadingUrl: string;\n        changeSkeletonData: (url: string) => void;\n        engineOnDestory: () => void;\n    }\n}\n\nexport { };"]}