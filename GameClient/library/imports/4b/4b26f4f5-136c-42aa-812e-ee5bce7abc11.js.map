{"version":3,"sources":["assets/c2f-framework/utils/Vec3Util.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/** 向量工具 */\nclass Vec3Util {\n    /**\n     * X轴\n     */\n    static get x(): Readonly<cc.Vec3> {\n        return new cc.Vec3(1, 0, 0);\n    }\n\n    /**\n     * Y轴\n     */\n    static get y(): Readonly<cc.Vec3> {\n        return new cc.Vec3(0, 1, 0);\n    }\n\n    /**\n     * Z轴\n     */\n    static get z(): Readonly<cc.Vec3> {\n        return new cc.Vec3(0, 0, 1);\n    }\n\n    /**\n     * 左向量\n     */\n    static get left(): Readonly<cc.Vec3> {\n        return new cc.Vec3(-1, 0, 0);\n    }\n\n    /**\n     * 右向量\n     */\n    static get right(): Readonly<cc.Vec3> {\n        return new cc.Vec3(1, 0, 0);\n    }\n\n    /**\n     * 上向量\n     */\n    static get up(): Readonly<cc.Vec3> {\n        return new cc.Vec3(0, 1, 0);\n    }\n\n    /**\n     * 下向量\n     */\n    static get down(): Readonly<cc.Vec3> {\n        return new cc.Vec3(0, -1, 0);\n    }\n\n    /**\n     * 前向量\n     */\n    static get forward(): Readonly<cc.Vec3> {\n        return new cc.Vec3(0, 0, 1);\n    }\n\n    /**\n     * 后向量\n     */\n    static get back(): Readonly<cc.Vec3> {\n        return new cc.Vec3(0, 0, -1);\n    }\n\n    /**\n     * 1向量\n     */\n    static get one(): Readonly<cc.Vec3> {\n        return new cc.Vec3(1, 1, 1);\n    }\n\n    /**\n     * 0向量\n     */\n    static get zero(): Readonly<cc.Vec3> {\n        return new cc.Vec3(0, 0, 0);\n    }\n\n    /**\n     * 随时间变化进度值\n     * @param start  起始位置\n     * @param end    结束位置\n     * @param t      进度[0，1]\n     */\n    static progress(start: cc.Vec3, end: cc.Vec3, t: number): cc.Vec3 {\n        var current = new cc.Vec3();\n        current.x = c2f.utils.math.progress(start.x, end.x, t);\n        current.y = c2f.utils.math.progress(start.y, end.y, t);\n        current.z = c2f.utils.math.progress(start.z, end.z, t);\n        return current;\n    }\n\n    /**\n     * 求两个三维向量的和\n     * @param pos1  向量1\n     * @param pos2  向量2\n     */\n    static add(pos1: cc.Vec3, pos2: cc.Vec3): cc.Vec3 {\n        var outPos: cc.Vec3 = new cc.Vec3();\n        cc.Vec3.add(outPos, pos1, pos2);\n        return outPos;\n    }\n\n    /**\n     * 求两个三维向量的差\n     * @param pos1  向量1\n     * @param pos2  向量2\n     */\n    static sub(pos1: cc.Vec3, pos2: cc.Vec3): cc.Vec3 {\n        var outPos: cc.Vec3 = new cc.Vec3();\n        cc.Vec3.subtract(outPos, pos1, pos2);\n        return outPos;\n    }\n\n    /**\n     * 三维向量乘以常量\n     * @param pos     向量\n     * @param scalar  常量\n     */\n    static mul(pos: cc.Vec3, scalar: number): cc.Vec3 {\n        var outPos: cc.Vec3 = new cc.Vec3();\n        cc.Vec3.multiplyScalar(outPos, pos, scalar);\n        return outPos;\n    }\n\n    /**\n     * 三维向量除常量\n     * @param pos     向量\n     * @param scalar  常量\n     */\n    static div(pos: cc.Vec3, scalar: number): cc.Vec3 {\n        var outPos: cc.Vec3 = new cc.Vec3();\n\n        outPos.x = pos.x / scalar;\n        outPos.y = pos.y / scalar;\n        outPos.z = pos.z / scalar;\n\n        return outPos;\n    }\n\n    /**\n     * 判断两个三维向量的值是否相等\n     * @param pos1  向量1\n     * @param pos2  向量2\n     */\n    static equals(pos1: cc.Vec3, pos2: cc.Vec3): boolean {\n        if (pos1.x == pos2.x && pos1.y == pos2.y && pos1.z == pos2.z) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * 判断两个三维向量的值是否相等\n     * @param pos1  向量1\n     * @param pos2  向量2\n     */\n    static v2Equals(pos1: cc.Vec2, pos2: cc.Vec2): boolean {\n        if (pos1.x == pos2.x && pos1.y == pos2.y) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * 三维向量的模\n     * @param pos  向量\n     */\n    static magnitude(pos: cc.Vec3): number {\n        return pos.len();\n    }\n\n    /**\n     * 三维向量归一化\n     * @param pos  向量\n     */\n    static normalize(pos: cc.Vec3): cc.Vec3 {\n        var outPos: cc.Vec3 = new cc.Vec3(pos.x, pos.y, pos.z);\n        return outPos.normalize();\n    }\n\n    /**\n     * 获得位置1，到位置2的方向\n     * @param pos1  向量1\n     * @param pos2  向量2\n     */\n    static direction(pos1: cc.Vec3, pos2: cc.Vec3): cc.Vec3 {\n        var outPos: cc.Vec3 = new cc.Vec3();\n        cc.Vec3.subtract(outPos, pos2, pos1)\n        return outPos.normalize();\n    }\n\n    /**\n     * 获得两点间的距离\n     * @param pos1  向量1\n     * @param pos2  向量2\n     */\n    static distance(pos1: cc.Vec3, pos2: cc.Vec3): number {\n        return cc.Vec3.distance(pos1, pos2);\n    }\n\n    /**\n     * 插值运算\n     * @param posStart  开始俏步\n     * @param posEnd    结束位置\n     * @param t         时间\n     */\n    static lerp(posStart: cc.Vec3, posEnd: cc.Vec3, t: number): cc.Vec3 {\n        return this.bezierOne(t, posStart, posEnd);\n    }\n\n    /**\n     * 球面插值\n     * @param from  起点\n     * @param to    终点\n     * @param t     时间\n     */\n    static slerp(from: cc.Vec3, to: cc.Vec3, t: number): cc.Vec3 {\n        if (t <= 0) {\n            return from;\n        }\n        else if (t >= 1) {\n            return to;\n        }\n        let dir: cc.Vec3 = this.rotateTo(from, to, (cc.Vec3.angle(from, to) / Math.PI * 180) * t);\n        let lenght: number = to.len() * t + from.len() * (1 - t);\n        return (dir.normalize()).multiplyScalar(lenght);\n    }\n\n    /**\n     * 向量旋转一个角度\n     * @param from  起点\n     * @param to    终点\n     * @param angle 角并\n     */\n    static rotateTo(from: cc.Vec3, to: cc.Vec3, angle: number): cc.Vec3 {\n        //如果两个方向角度为0，则返回目标\n        if (cc.Vec3.angle(from, to) == 0) {\n            return to;\n        }\n\n        let axis: cc.Vec3 = new cc.Vec3()                 // 获得旋转轴\n        cc.Vec3.cross(axis, from, to);\n        axis.normalize();\n\n        let radian: number = angle * Math.PI / 180; // 获得弧度\n        let rotateMatrix: cc.Mat4 = new cc.Mat4();\n        rotateMatrix.rotate(radian, axis);\n\n        return new cc.Vec3(\n            from.x * rotateMatrix.m[0] + from.y * rotateMatrix.m[4] + from.z * rotateMatrix.m[8],\n            from.x * rotateMatrix.m[1] + from.y * rotateMatrix.m[5] + from.z * rotateMatrix.m[9],\n            from.x * rotateMatrix.m[2] + from.y * rotateMatrix.m[6] + from.z * rotateMatrix.m[10]\n        );\n    }\n\n    /**\n     * 一次贝塞尔即为线性插值函数\n     * @param t \n     * @param posStart \n     * @param posEnd \n     * @returns \n     */\n    static bezierOne(t: number, posStart: cc.Vec3, posEnd: cc.Vec3): cc.Vec3 {\n        if (t > 1) {\n            t = 1;\n        }\n        else if (t < 0) {\n            t = 0\n        }\n\n        let pStart: cc.Vec3 = posStart.clone();\n        let pEnd: cc.Vec3 = posEnd.clone();\n        return pStart.multiplyScalar(1 - t).add(pEnd.multiplyScalar(t));\n    }\n\n    /**\n     * 二次贝塞尔曲线\n     * @param t \n     * @param posStart \n     * @param posCon \n     * @param posEnd \n     * @returns \n     */\n    static bezierTwo(t: number, posStart: cc.Vec3, posCon: cc.Vec3, posEnd: cc.Vec3): cc.Vec3 {\n        if (t > 1) {\n            t = 1;\n        }\n        else if (t < 0) {\n            t = 0\n        }\n\n        var n = (1 - t);\n        var tt = t * t;\n\n        var pStart: cc.Vec3 = posStart.clone();\n        var pos = posStart.clone();\n\n        var pCon: cc.Vec3 = posCon.clone();\n        var pEnd: cc.Vec3 = posEnd.clone();\n\n        pos.add(pStart.multiplyScalar(n * n));\n        pos.add(pCon.multiplyScalar(2 * n * t));\n        pos.add(pEnd.multiplyScalar(tt));\n\n        return pos;\n    }\n\n    /**\n     * 三次贝塞尔\n     * @param t \n     * @param posStart \n     * @param posCon1 \n     * @param posCon2 \n     * @param posEnd \n     * @returns \n     */\n    static bezierThree(t: number, posStart: cc.Vec3, posCon1: cc.Vec3, posCon2: cc.Vec3, posEnd: cc.Vec3): cc.Vec3 {\n        if (t > 1) {\n            t = 1;\n        }\n        else if (t < 0) {\n            t = 0\n        }\n\n        var n = (1 - t);\n        var nn = n * n;\n        var nnn = nn * n;\n        var tt = t * t;\n        var ttt = tt * t;\n\n        var pStart: cc.Vec3 = posStart.clone();\n        var pos = posStart.clone();\n\n        var pCon1: cc.Vec3 = posCon1.clone();\n        var pCon2: cc.Vec3 = posCon2.clone();\n        var pEnd: cc.Vec3 = posEnd.clone();\n\n        pos.add(pStart.multiplyScalar(nnn));\n        pos.add(pCon1.multiplyScalar(3 * nn * t));\n        pos.add(pCon2.multiplyScalar(3 * n * tt));\n        pos.add(pEnd.multiplyScalar(ttt));\n\n        return pos;\n    }\n\n    /**\n     * 点乘\n     * @param dir1 方向量1\n     * @param dir2 方向量2\n     */\n    public static dot(dir1: cc.Vec3, dir2: cc.Vec3): number {\n        var tempDir1: cc.Vec3 = dir1;\n        var tempDir2: cc.Vec3 = dir2;\n\n        return tempDir1.x * tempDir2.x + tempDir1.y * tempDir2.y + tempDir1.z * tempDir2.z;\n    }\n\n    /**\n     * 叉乘\n     * @param dir1 方向量1\n     * @param dir2 方向量2\n     */\n    public static cross(dir1: cc.Vec3, dir2: cc.Vec3): cc.Vec3 {\n        var i: cc.Vec3 = new cc.Vec3(1, 0, 0);\n        var j: cc.Vec3 = new cc.Vec3(0, 1, 0);\n        var k: cc.Vec3 = new cc.Vec3(0, 0, 1);\n\n        var tempDir1: cc.Vec3 = new cc.Vec3(dir1.x, dir1.y, dir1.z);\n        var tempDir2: cc.Vec3 = new cc.Vec3(dir2.x, dir2.y, dir2.z);\n\n        var iv: cc.Vec3 = i.multiplyScalar(tempDir1.y * tempDir2.z - tempDir2.y * tempDir1.z);\n        var jv: cc.Vec3 = j.multiplyScalar(tempDir2.x * tempDir1.z - tempDir1.x * tempDir2.z);\n        var kv: cc.Vec3 = k.multiplyScalar(tempDir1.x * tempDir2.y - tempDir2.x * tempDir1.y);\n\n        return iv.add(jv).add(kv);\n    }\n\n    /**\n     * 获得两个方向向量的角度\n     * @param dir1 方向量1\n     * @param dir2 方向量2\n     */\n    public static angle(dir1: cc.Vec3, dir2: cc.Vec3): number {\n        let dotValue = this.dot(dir1.clone().normalize(), dir2.clone().normalize());\n        return Math.acos(dotValue) / Math.PI * 180 * Math.sign(dotValue);\n    }\n\n    /**\n     * 从节点1到节点2的角度（带有方向的角度）\n     * @param a 角度a\n     * @param b 角度b\n     */\n    static angleEx(dir1: cc.Vec3, dir2: cc.Vec3) {\n        let angle: number = Math.atan2((dir2.y - dir1.y), (dir2.x - dir1.x))\n        let theta: number = angle * (180 / Math.PI);\n        return theta;\n    }\n\n    /**\n     * 获得方向a到方向b的角度（带有方向的角度）\n     * @param a 角度a\n     * @param b 角度b\n     */\n    public static dirAngle(a: cc.Vec3, b: cc.Vec3): number {\n        var c: cc.Vec3 = Vec3Util.cross(a, b);\n        var angle: number = Vec3Util.angle(a, b);\n        // a 到 b 的夹角\n        var sign = Math.sign(Vec3Util.dot(c.normalize(), Vec3Util.cross(b.normalize(), a.normalize())));\n        return angle * sign;\n    }\n\n    /**\n     * 获得方向a到方向b的角度（带有方向的角度）\n     * @param a 角度a\n     * @param b 角度b\n     */\n    static dirAngleEx(a: cc.Vec3, b: cc.Vec3): number {\n        let angleA = Vec3Util.angleEx(cc.Vec3.ZERO.clone(), a);\n        let angleB = Vec3Util.angleEx(cc.Vec3.ZERO.clone(), b);\n        return angleB - angleA;\n    }\n\n    /** v2->v3 */\n    static vec2To3(a: cc.Vec2) {\n        return new cc.Vec3(a.x, a.y, 0);\n    }\n\n    /** 判断两坐标差距是否在范围之内 */\n    static isInRange(a: cc.Vec3, b: cc.Vec3, range: number) {\n        let disX = Math.abs(a.x - b.x);\n        let disY = Math.abs(a.y - b.y);\n        return disX < range && disY < range;\n    }\n\n    /**\n     * 圆心在坐标原点的椭圆，以与x轴逆时针方向的角度计算对应椭圆边上的坐标\n     */\n    static getEllipsePoint(a: number, b: number, degree: number): cc.Vec2 {\n        degree = c2f.utils.math.normalizeDegree(degree);\n        let k = Math.tan(cc.misc.degreesToRadians(degree));\n        let x = Math.sqrt(b * b / (k * k + b * b / a / a));\n        if (degree > 90 && degree < 270) {\n            x = -x;\n        }\n        let y = Math.sqrt(b * b - b * b * x * x / a / a);\n        if (degree > 180) {\n            y = -y;\n        }\n        return cc.v2(x, y);\n    }\n\n}\n\ndeclare global {\n    interface IUtil {\n        vec: typeof Vec3Util;\n    }\n}\nc2f.utils.vec = Vec3Util;\nexport { };\n"]}