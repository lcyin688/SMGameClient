{"version":3,"sources":["assets/c2f-framework/core/event/EventManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { EventData, ListenerFunc } from \"./EventDefine\";\n\nclass EventManager {\n    static readonly instance: EventManager = new EventManager();\n\n    //普通事件\n    private events: { [key: string]: Array<EventData> } = {};\n    //分组事件\n    private groupEvt: { [key: string]: { [key: string]: Array<EventData> } } = {}\n\n    private addToList(list: EventData[], event: string, listener: ListenerFunc, object: Object) {\n        let length = list.length;\n        for (let i = 0; i < length; i++) {\n            let bin = list[i];\n            if (bin.listener == listener && bin.object == object) {\n                cc.warn(`名为【${event}】的事件重复注册侦听器`);\n            }\n        }\n        let data: EventData = new EventData();\n        data.event = event;\n        data.listener = listener;\n        data.object = object;\n        list.push(data);\n    }\n\n    /**\n     * 注册全局事件\n     * @param event      事件名\n     * @param listener   处理事件的侦听器函数\n     * @param object     侦听函数绑定的作用域对象\n     */\n    public on(event: string, listener: ListenerFunc, object: object) {\n        if (!event || !listener) {\n            cc.warn(`注册【${event}】事件的侦听器函数为空`);\n            return;\n        }\n        let list: Array<EventData> = this.events[event];\n        if (list == null) {\n            list = [];\n            this.events[event] = list;\n        }\n        this.addToList(list, event, listener, object);\n    }\n\n    /**\n     * 按分组监听时间\n     * @param group 分组名称\n     * @param event 时间名称\n     * @param listener 监听函数\n     * @param object 监听函数绑定的作用域对象\n     */\n    public onGroup(group: string, event: string, listener: ListenerFunc, object: object) {\n        if (!this.groupEvt[group]) {\n            this.groupEvt[group] = {};\n        }\n        if (!this.groupEvt[group][event]) {\n            this.groupEvt[group][event] = [];\n        }\n        this.addToList(this.groupEvt[group][event], event, listener, object);\n    }\n\n    /**\n     * 监听一次事件，事件响应后，该监听自动移除\n     * @param event     事件名\n     * @param listener  事件触发回调方法\n     * @param object    侦听函数绑定的作用域对象\n     */\n    public once(event: string, listener: ListenerFunc, object: object) {\n        let _listener: any = ($event: string, $args: any) => {\n            this.off(event, _listener, object);\n            _listener = null;\n            listener.call(object, $event, $args);\n        }\n        this.on(event, _listener, object);\n    }\n\n    /**\n     * 移除全局事件\n     * @param event     事件名\n     * @param listener  处理事件的侦听器函数\n     * @param object    侦听函数绑定的作用域对象\n     */\n    public off(event: string, listener: Function, object: object) {\n        let list: Array<EventData> = this.events[event];\n        if (!list) {\n            cc.log(`名为【${event}】的事件不存在`);\n            return;\n        }\n\n        let length = list.length;\n        for (let i = 0; i < length; i++) {\n            let bin: EventData = list[i];\n            if (bin.listener == listener && bin.object == object) {\n                list.splice(i, 1);\n                break;\n            }\n        }\n\n        if (list.length == 0) {\n            delete this.events[event];\n        }\n    }\n\n    /**\n     * 移除分组事件监听\n     * @param group 分组名称\n     * @param event 事件名称\n     * @param listener 监听函数\n     * @param object 监听函数绑定对象\n     */\n    public offGroup(group: string, event: string, listener: Function, object: object) {\n        let dstGroup = this.groupEvt[group];\n        if (!dstGroup) {\n            return;\n        }\n        let evts = dstGroup[event];\n        if (!evts || evts.length <= 0) {\n            return;\n        }\n        let length = evts.length;\n        for (let i = 0; i < length; i++) {\n            let bin: EventData = evts[i];\n            if (bin.listener == listener && bin.object == object) {\n                evts.splice(i, 1);\n                break;\n            }\n        }\n        if (evts.length == 0) {\n            delete dstGroup[event];\n        }\n    }\n\n    /**\n     * 移除分组内所有事件\n     * @param group 分组名称\n     * @returns \n     */\n    public offGroupAll(group: string) {\n        let dictEvent = this.groupEvt[group];\n        if (!dictEvent) {\n            return;\n        }\n        this.groupEvt[group] = {};\n    }\n\n    /** \n     * 触发全局事件 \n     * @param event(string)      事件名\n     * @param args(any)          事件参数\n     */\n    public emit(event: string, ...args: any[]) {\n        let list: Array<EventData> = this.events[event];\n        if (list != null) {\n            let temp: Array<EventData> = list.concat();\n            let length = temp.length;\n            for (let i = 0; i < length; i++) {\n                let eventBin = temp[i];\n                eventBin.listener.call(eventBin.object, event, ...args);\n            }\n        }\n    }\n\n    /** \n         * 触发全局事件 \n         * @param group 分组名称\n         * @param event(string)      事件名\n         * @param args(any)          事件参数\n         */\n    public emitGroup(group: string, event: string, ...args: any[]) {\n        let dictEvent = this.groupEvt[group];\n        if (!dictEvent) {\n            return;\n        }\n        let list = dictEvent[event];\n        if (!list || list.length <= 0) {\n            return;\n        }\n        let temp: Array<EventData> = list.concat();\n        let length = temp.length;\n        for (let i = 0; i < length; i++) {\n            let eventBin = temp[i];\n            eventBin.listener.call(eventBin.object, event, ...args);\n        }\n    }\n\n}\n\ndeclare global {\n    interface IC2F {\n        event: EventManager;\n    }\n}\n\nc2f.event = EventManager.instance;\nexport { };"]}