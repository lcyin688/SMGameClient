{"version":3,"sources":["assets/c2f-framework/redDot/RedDot.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { EventDispatcher } from \"../core/event/EventDispatcher\";\n\nenum RedDotShowType {\n    Normal = 1, // 普通红点\n    Number = 2, // 数值\n    Mark = 3,   // 感叹号\n    Once = 4,   // 一次性红点\n}\n\nconst RedDotEvent = {\n    EVENT_NEED_UPDATE: \"EVENT_NEED_UPDATE\",\n    EVENT_UPDATE_DISPLAY: \"EVENT_UPDATE_DISPLAY\",\n    EVENT_CHANGE_SHOW_TYPE: \"EVENT_CHANGE_SHOW_TYPE\",\n    EVENT_ADD_DISPLAY: \"EVENT_ADD_DISPLAY\",\n    EVENT_REMOVE_DISPLAY: \"EVENT_REMOVE_DISPLAY\",\n}\n\nclass DotKey<Options = any> {\n    public id: number;\n    public opt: Options;\n    constructor(id: number, opt: any) {\n        this.id = id;\n        this.opt = opt;\n    }\n    public toString() {\n        let value = this.id.toString();\n        if (this.opt) {\n            value = value + JSON.stringify(this.opt);\n        }\n        return value;\n    }\n    public getOptStr() {\n        if (!this.opt) {\n            return 'null';\n        } else {\n            return JSON.stringify(this.opt);\n        }\n    }\n\n}\n\nclass RedDot<Options = any> extends EventDispatcher {\n\n    public static readonly Event = RedDotEvent;\n    public static readonly ShowType = RedDotShowType;\n\n    /** 红点配置信息 */\n    private _cfg: RedDotDef;\n    public get cfg(): RedDotDef {\n        return this._cfg;\n    }\n    public set cfg(value: RedDotDef) {\n        if (!value) {\n            return;\n        }\n        this._cfg = value;\n        this.showType = value.showType;\n    }\n\n    /** 红点Id */\n    public get id(): number {\n        return this.cfg.id;\n    }\n    /** 名称 */\n    public get name(): string {\n        return this.cfg.name;\n    }\n    /** 位置 */\n    public get offset(): cc.Vec2 {\n        return cc.v2(this.cfg.offsetX, this.cfg.offsetY);\n    }\n\n    /** 参数 */\n    public get options() {\n        return this.key.opt;\n    }\n\n    /** 展示类型 */\n    private _showType: RedDotShowType = RedDotShowType.Normal;\n    public get showType(): RedDotShowType {\n        return this._showType;\n    }\n    public set showType(value: RedDotShowType) {\n        if (this._showType != value) {\n            this._showType = value;\n            this.updateDisplayShowType(value);\n        }\n    }\n\n    /** 是否启用 */\n    private _enabled = true;\n    public get enabled() {\n        return this._enabled;\n    }\n    public set enabled(value) {\n        if (this._enabled === value) {\n            return;\n        }\n        this._enabled = value;\n        this._updateDisplayNodeStatus();\n    }\n\n    /** 父节点 */\n    private _parent: RedDot = null;\n    public get parent(): RedDot {\n        return this._parent;\n    }\n\n    /** 子节点 */\n    public children: RedDot[] = [];\n\n    /** 计数 */\n    private _count: number = 0;\n    public get count(): number {\n        return this._count;\n    }\n\n    /** 刷新标志 */\n    private _isDirty = false;\n    public get isDirty() {\n        return this._isDirty;\n    }\n    public set isDirty(value) {\n        if (this._isDirty != value) {\n            this._isDirty = value;\n            if (value && this._parent) {\n                this._parent.isDirty = true;\n            }\n        }\n    }\n\n    /** key */\n    private _key: DotKey;\n    public get key(): DotKey {\n        return this._key;\n    }\n    public set key(v: DotKey) {\n        this._key = v;\n    }\n\n    /** 关联节点 */\n    protected arrDisplayProxy: c2f.RedDotComp[] = [];\n    /** 本地刷新·有些红点仅仅是界面内临时数据引发的，并不在data中,这里提供一个直接回调 */\n    private _tmpUpdateHandler: Function;\n    public get tmpUpdateHandler(): Function {\n        return this._tmpUpdateHandler;\n    }\n    public set tmpUpdateHandler(v: Function) {\n        this._tmpUpdateHandler = v;\n    }\n\n    constructor(info: RedDotDef, options: any) {\n        super();\n        this.key = new DotKey(info.id, options);\n        this.setGroupName(this.key.toString());\n        this.cfg = info;\n    }\n\n    /** 主动刷新红点 */\n    public toRefresh() {\n        this.emit(RedDotEvent.EVENT_NEED_UPDATE, this.key);\n    }\n\n    /** 添加子节点 */\n    public addChild(child: RedDot) {\n        if (!child) {\n            console.error(`RedDot-> addChild child is null`);\n            return;\n        }\n        child._parent = this;\n        this.children.push(child);\n    }\n\n    /** 移除子节点 */\n    public removeChild(child: RedDot) {\n        c2f.utils.arr.fastRemove(this.children, child);\n        child._parent = null;\n    }\n\n    /**\n     * 设置红点值\n     * @param {number} count\n     */\n    public setCount(count: number) {\n        if (this.isLeaf()) {\n            this._updateCount(count);\n            // 更新完数据之后 关闭标识\n            this.isDirty = false;\n        } else {\n            console.warn(`RedDot-> 当前红点[${this.id}]不是叶子节点，无法直接设置 红点计数`);\n        }\n    }\n\n    /** 更新计数 */\n    private _updateCount(count: number) {\n        if (this._count != count) {\n            this._count = count;\n            this.isDirty = true;\n            this._updateDisplayNodeStatus();\n        }\n    }\n\n    /** 刷新父节点 */\n    public toRefreshParent() {\n        this.refreshParent();\n    }\n\n    private refreshParent() {\n        this.parent?.refreshSelf();\n        this.parent?.refreshParent();\n    }\n\n    /** 刷新自身 */\n    private refreshSelf() {\n        if (!this.isDirty) {\n            return;\n        }\n        let count = 0;\n        for (let i = 0; i < this.children.length; i++) {\n            const child = this.children[i];\n            if (child.isDirty) {\n                child.refreshSelf();\n            }\n            count += child.count;\n        }\n        this._updateCount(count);\n        // 更新完之后关闭标识\n        this.isDirty = false;\n    }\n\n    /** 刷新节点状态 */\n    private _updateDisplayNodeStatus() {\n        for (let i = 0; i < this.arrDisplayProxy.length;) {\n            const one = this.arrDisplayProxy[i];\n            if (one && one.isValid && one.node) {\n                one.updateCount(this.count);\n                one.setDisplay(this.enabled && this.count > 0);\n                ++i;\n            } else {\n                this.arrDisplayProxy.splice(i, 1);\n            }\n        }\n    }\n\n    /** 刷新 */\n    public refresh() {\n        if (this.isLeaf()) {\n            this.refreshParent();\n        } else {\n            this.refreshSelf();\n        }\n    }\n\n    /** 是否为叶子节点 */\n    public isLeaf() {\n        return this.children.length === 0;\n    }\n\n    public getDisplayCnt() {\n        return this.arrDisplayProxy.length;\n    }\n\n    /** 刷新dot显示类型 */\n    private updateDisplayShowType(type: RedDotShowType) {\n        for (let one of this.arrDisplayProxy) {\n            one.setShowType(type);\n        }\n    }\n\n    /** 设置显示节点:未应用 */\n    public setDisplayProxy(container: cc.Node) {\n        if (!container || !container.isValid) {\n            console.error(`RedDot-> 红点节点错误`);\n            return;\n        }\n        this.emit(RedDotEvent.EVENT_ADD_DISPLAY, this.key, container);\n    }\n\n    public hasDisplay(dotComp: c2f.RedDotComp) {\n        let find = this.arrDisplayProxy.indexOf(dotComp);\n        return find >= 0;\n    }\n\n    public addDisplay(dotComp: c2f.RedDotComp) {\n        this.arrDisplayProxy.push(dotComp);\n    }\n\n    /** 移除所有显示节点 */\n    public removeAllDisplay() {\n        for (let one of this.arrDisplayProxy) {\n            this.removeDisplay(one);\n        }\n    }\n\n    /** 移除小红点组件及Display数据 */\n    private removeDisplay(dotComp: c2f.RedDotComp) {\n        if (dotComp && dotComp.isValid) {\n            dotComp.node.removeFromParent();\n            dotComp.node.destroy();\n            dotComp.destroy();\n            this.deleteDisplayDataOnly(dotComp);\n        }\n    }\n\n    /** 移除映射数据：红点组件onDestroy时同步清除其RedDot和Display数据 */\n    public deleteDisplayDataOnly(dotComp: c2f.RedDotComp) {\n        c2f.utils.arr.fastRemove(this.arrDisplayProxy, dotComp);\n        this.emit(RedDotEvent.EVENT_REMOVE_DISPLAY, this.key);\n    }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    public destroy() {\n        this.clear();\n    }\n\n    public clear(): void {\n        super.destroy();\n        this.children.forEach((child) => {\n            child.destroy();\n        });\n\n        this.parent?.removeChild(this);\n        this.children.length = 0;\n        this._parent = null;\n\n        this.removeAllDisplay();\n    }\n}\n\ndeclare global {\n    interface IC2F {\n        RedDot: typeof RedDot;\n        DotKey: typeof DotKey;\n    }\n    namespace c2f {\n        type RedDot<Options = any> = InstanceType<typeof RedDot<Options>>;\n        type DotKey<Options = any> = InstanceType<typeof DotKey<Options>>;\n        namespace RedDot {\n            type ShowType = RedDotShowType;\n        }\n    }\n}\nc2f.RedDot = RedDot;\nc2f.DotKey = DotKey;\n\nexport { };"]}