{"version":3,"sources":["assets/c2f-framework/core/timer/TimerManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { GameTimer } from \"./GameTimer\";\nimport { Timer } from \"./Timer\";\n\ndeclare global {\n    interface IC2F {\n        timer: TimerManager;\n    }\n}\n\nclass TimerData {\n    id: string;\n    timer: Timer;\n    object: any;\n    field: string;\n    startTime: number;\n    onSecond: Function;\n    onComplete: Function;\n}\n\n/** 时间管理 */\nexport class TimerManager extends cc.Component {\n    /** 倒计时数据 */\n    private times: { [key: string]: TimerData } = {};\n    /** 当前游戏进入的时间毫秒值 */\n    private initTime: number = (new Date()).getTime();\n    /** 服务器时间与本地时间同步 */\n    private serverTime: number = 0;\n\n    /** 全局第一个加载的TimerManager组件 */\n    private static _instance: TimerManager = null;\n    public static getInstance(): TimerManager {\n        return this._instance;\n    }\n\n    protected onLoad(): void {\n        if (TimerManager._instance) {\n            return;\n        }\n        TimerManager._instance = this;\n        GameTimer.reset();\n    }\n\n    protected onDestroy(): void {\n        if (TimerManager._instance === this) {\n            TimerManager._instance = null;\n        }\n        GameTimer.onDestroy();\n    }\n\n    protected update(dt: number) {\n        //只启用第一个加载的组件\n        if (TimerManager._instance !== this) {\n            return;\n        }\n        GameTimer.update(dt);\n        //\n        for (let key in this.times) {\n            let data = this.times[key];\n            let timer = data.timer as Timer;\n            if (timer.update(dt)) {\n                if (data.object[data.field] > 0) {\n                    data.object[data.field]--;\n\n                    // 倒计时结束触发\n                    if (data.object[data.field] == 0) {\n                        this.onTimerComplete(data);\n                    }\n                    // 触发每秒回调事件  \n                    else if (data.onSecond) {\n                        data.onSecond.call(data.object);\n                    }\n                }\n            }\n        }\n    }\n\n    /** 触发倒计时完成事件 */\n    private onTimerComplete(data: any) {\n        if (data.onComplete) data.onComplete.call(data.object);\n        if (data.event) this.node.emit(data.event);\n        delete this.times[data.id];\n    }\n\n    /**\n     * 在指定对象上注册一个倒计时的回调管理器\n     * @param object        注册定时器的对象\n     * @param field         时间字段\n     * @param onSecond      每秒事件\n     * @param onComplete    倒计时完成事件\n     * @returns \n     * @example\n        export class Test extends Component {\n            private timeId!: string;        \n            start() {\n                // 在指定对象上注册一个倒计时的回调管理器\n                this.timeId = c2f.timer.register(this, \"countDown\", this.onSecond, this.onComplete);\n            }        \n            private onSecond() {\n                console.log(\"每秒触发一次\");\n            }\n            private onComplete() {\n                console.log(\"倒计时完成触发\");\n            }\n        }\n    */\n    public register(object: any, field: string, onSecond: Function, onComplete: Function): any {\n        var timer = new Timer();\n        timer.step = 1;\n\n        let data: TimerData = new TimerData();\n        data.id = c2f.utils.str.guid();\n        data.timer = timer;\n        data.object = object;                                   // 管理对象\n        data.field = field;                                     // 时间字段\n        data.onSecond = onSecond;                               // 每秒事件\n        data.onComplete = onComplete;                           // 倒计时完成事件\n        this.times[data.id] = data;\n        return data.id;\n    }\n\n    /** \n     * 在指定对象上注销一个倒计时的回调管理器 \n     * @param id         时间对象唯一表示\n     * @example\n        export class Test extends Component {\n            private timeId!: string;\n            start() {\n                this.timeId = YT.timer.register(this, \"countDown\", this.onSecond, this.onComplete);\n            }\n            onDestroy() {\n                // 在指定对象上注销一个倒计时的回调管理器\n                YT.timer.unRegister(this.timeId);\n            }\n        }\n     */\n    public unRegister(id: string) {\n        if (this.times[id])\n            delete this.times[id];\n    }\n\n    /**\n     * 服务器时间与本地时间同步\n     * @param val   服务器时间刻度\n     * \n     */\n    public setServerTime(val?: number): number {\n        if (val) {\n            this.serverTime = val;\n        }\n        return this.serverTime;\n    }\n\n    public getServerTime(): number {\n        return this.serverTime + this.getTime();\n    }\n\n    /** 获取游戏开始到现在逝去的时间 */\n    public getTime(): number {\n        return this.getLocalTime() - this.initTime;\n    }\n\n    /** 获取本地时间刻度 */\n    public getLocalTime(): number {\n        return Date.now();\n    }\n\n    /** 游戏最小化时记录时间数据 */\n    public save() {\n        for (let key in this.times) {\n            this.times[key].startTime = this.getTime();\n        }\n    }\n\n    /** 游戏最大化时回复时间数据 */\n    public load() {\n        for (let key in this.times) {\n            let interval = Math.floor((this.getTime() - (this.times[key].startTime || this.getTime())) / 1000);\n            let data = this.times[key];\n            data.object[data.field] = data.object[data.field] - interval;\n            if (data.object[data.field] < 0) {\n                data.object[data.field] = 0;\n                this.onTimerComplete(data);\n            }\n            this.times[key].startTime = null;\n        }\n    }\n\n    public once(callback: Function, delayTime: number) {\n        this.scheduleOnce(() => {\n            callback && callback();\n        }, delayTime);\n    }\n}\n\nif (!CC_EDITOR) {\n    let curScene = cc.director.getScene();\n    if (curScene) {\n        let node = new cc.Node(\"TimerManager\");\n        cc.game.addPersistRootNode(node);\n        c2f.timer = node.addComponent(TimerManager);\n    } else {\n        cc.director.on(cc.Director.EVENT_AFTER_SCENE_LAUNCH, (scene: cc.Scene) => {\n            if (TimerManager.getInstance()) {\n                return;\n            }\n            let node = new cc.Node(\"TimerManager\");\n            cc.game.addPersistRootNode(node);\n            c2f.timer = node.addComponent(TimerManager);\n        });\n    }\n}\n"]}