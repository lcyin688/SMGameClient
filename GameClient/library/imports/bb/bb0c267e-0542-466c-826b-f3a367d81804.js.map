{"version":3,"sources":["assets/c2f-framework/net/ws/WebService.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["export enum SocketState {\n    Connecting = 0,\n    ConnectTimeOut = 1,\n    Connected = 2,\n    Error = 3,\n    ReconnectSuc = 4,\n};\n\n//重连最大次数\nconst reconnetMax = 5;\n//重连间隔\nconst reconnetInterval = 6;\n\n\nexport class WebService {\n    protected socket: WebSocket;\n    protected state: SocketState;\n    protected url: string;\n\n    protected connectCb: Function;    //连接成功回调\n    protected messageCb: Function;    //收到消息回调\n    protected wsEventCb: Function;    //网络事件回调\n\n    protected reconnectTimes: number; //重连次数\n    protected reconnectTimer: NodeJS.Timeout; //重连timer    \n    constructor() {\n        this.socket = null;\n        this.state = SocketState.Error;\n        this.url = null;\n\n        this.reconnectTimes = 0;\n        this.reconnectTimer = null;\n        this.connectCb = null;\n    }\n\n    /** 消息回调 */\n    public setMessageCb(cb: Function) {\n        this.messageCb = cb;\n    }\n\n    /** socket事件回调 */\n    public setWsEventCb(cb: Function) {\n        this.wsEventCb = cb;\n    }\n\n    /** socket连接成功 */\n    private onOpen(event: any) {\n        cc.log(\"Send Text WS was opened.\");\n        this.reconnectTimes = 0;\n        this.stateChanged(SocketState.Connected);\n    }\n\n    /** 发送消息: 子类具体实现 */\n    public tcpSend(...params) {\n    }\n\n    /** 收到消息：子类具体实现 */\n    protected onMessage(event: any) {\n    }\n\n    /** 网络错误 */\n    private onError(event) {\n        cc.log(\"WebSocket fired an error\");\n        let target = event.currentTarget || event.target;\n        if (this.socket && this.socket.readyState != WebSocket.CLOSED && this.url && target && target.url == this.url) {\n            this.stateChanged(SocketState.Error);\n        }\n    }\n\n    /** 网络断开 */\n    private onClosed(event) {\n        cc.log(\"WebSocket instance closed.\");\n        let target = event.currentTarget || event.target;\n        if (this.url && target && target.url == this.url) {\n            if (target) {\n                cc.log(\"WebSocket instance closed:\" + target.readyState);\n            }\n            this.stateChanged(SocketState.ConnectTimeOut);\n            this.reconnect(this.url);\n        }\n    }\n    /** 连接socket */\n    public tcpConnet(url: string, callback: Function) {\n        this.url = url;\n        if (this.socket) {\n            this.socket.close();\n            this.socket.onopen = null;\n            this.socket.onmessage = null;\n            this.socket.onerror = null;\n            this.socket.onclose = null;\n            this.socket = null;\n        }\n        this.connectCb = callback;\n\n        cc.log(\"websocket connect\", url);\n        this.socket = new WebSocket(url);\n        // this.socket.onopen = () => {\n        //     console.log('Connected to server');\n        //     this.sendMessage('Hello, server!');\n        // };\n        // this.socket.onmessage = (event) => {\n        //     console.log('Received from server:', event.data);\n        // };\n\n\n        // this.socket.binaryType = \"arraybuffer\";\n        this.socket.onopen = this.onOpen.bind(this);\n        this.socket.onmessage = this.onMessage.bind(this);\n        this.socket.onerror = this.onError.bind(this);\n        this.socket.onclose = this.onClosed.bind(this);\n    }\n    /** 重新连接 */\n    private reconnect(url: string) {\n        if (!this.url) {\n            return;\n        }\n        //最大重连次数5次\n        if (this.reconnectTimes > reconnetMax) {\n            this.stateChanged(SocketState.Error);\n            return;\n        }\n\n\n\n        this.reconnectTimer = setTimeout(() => {\n            this.reconnectTimer = null;\n            if (this.url) {\n                this.reconnectTimes++;\n                this.tcpConnet(url, () => {\n                    if (this.socket.readyState == WebSocket.OPEN && this.url) {\n                        this.wsEventCb && this.wsEventCb(SocketState.ReconnectSuc);\n                    }\n                });\n            }\n        }, reconnetInterval * 1000);\n    }\n\n    public stateChanged(state: SocketState) {\n        this.state = state;\n        if (state === SocketState.Connecting) {\n\n        } else {\n            let reason = \"\";\n            switch (state) {\n                case SocketState.ConnectTimeOut:\n                    reason = \"ConnectTimeOut\";\n                    break;\n                case SocketState.Connected:\n                    reason = \"Connected\";\n                    break;\n                case SocketState.Error:\n                    reason = \"SocketError\";\n                    break;\n                default:\n                    break;\n            }\n\n            this.wsEventCb && this.wsEventCb(state);\n            if (this.connectCb) {\n                this.connectCb(reason);\n                this.connectCb = null;\n            }\n        }\n    }\n\n    public purge() {\n        this.clearReconnectTimer();\n        if (this.socket) {\n            this.socket.close();\n            this.socket = null;\n            this.url = null;\n            this.reconnectTimes = 0;\n        }\n    }\n\n    public clearReconnectTimer() {\n        if (this.reconnectTimer) {\n            clearTimeout(this.reconnectTimer);\n            this.reconnectTimes = null;\n        }\n    }\n}"]}