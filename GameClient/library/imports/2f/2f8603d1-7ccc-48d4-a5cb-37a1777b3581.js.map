{"version":3,"sources":["assets/c2f-framework/net/websocket/NetworkMsg.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,sBAAsB;AACd,IAAA,OAAO,GAAK,EAAE,CAAC,UAAU,QAAlB,CAAmB;AAGlC;IAAA;QAEY,OAAE,GAAqB,IAAI,CAAC;QACnB,uBAAkB,GAAG,IAAI,CAAC;IA4D/C,CAAC;mBA/DY,UAAU;IAMZ,kBAAO,GAAd;QACI,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,IAAI,CAAC,SAAS,GAAG,IAAI,YAAU,EAAE,CAAC;SACrC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC;IAC1B,CAAC;IACD,OAAO;IACA,4BAAO,GAAd,UAAe,GAAW;QAA1B,iBA8BC;QA7BG,IAAI,IAAI,CAAC,EAAE;YAAE,IAAI,CAAC,KAAK,EAAE,CAAC;QAE1B,IAAI,CAAC,EAAE,GAAG,IAAI,SAAS,CAAC,GAAG,CAAC,CAAC;QAE7B,IAAI,CAAC,EAAE,CAAC,MAAM,GAAG,UAAC,KAAK;YACnB,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC3B,8CAA8C;QAClD,CAAC,CAAC;QAEF,IAAI,CAAC,EAAE,CAAC,SAAS,GAAG,UAAC,KAAK;YACtB,IAAI;gBACA,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACpC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;aAGtC;YAAC,OAAO,CAAC,EAAE;gBACR,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;aAC9B;QACL,CAAC,CAAC;QAEF,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,UAAC,KAAK;YACpB,OAAO,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC7B,KAAI,CAAC,iBAAiB,EAAE,CAAC;QAC7B,CAAC,CAAC;QAEF,IAAI,CAAC,EAAE,CAAC,OAAO,GAAG,UAAC,KAAK;YACpB,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;YAC3B,4BAA4B;QAChC,CAAC,CAAC;IACN,CAAC;IAED,UAAU;IACH,yBAAI,GAAX,UAAY,IAAY;;QACpB,IAAI,OAAA,IAAI,CAAC,EAAE,0CAAE,UAAU,MAAK,SAAS,CAAC,IAAI,EAAE;YACxC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,YACvB,QAAQ,EAAE,GAAG,EACb,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE,IAClB,IAAI,EACT,CAAC,CAAC;SACP;IACL,CAAC;IAEO,sCAAiB,GAAzB;QAAA,iBAEC;QADG,UAAU,CAAC,sBAAM,OAAA,KAAI,CAAC,OAAO,CAAC,OAAA,KAAI,CAAC,EAAE,0CAAE,GAAG,KAAI,EAAE,CAAC,CAAA,EAAA,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAChF,CAAC;IAEM,0BAAK,GAAZ;;QACI,MAAA,IAAI,CAAC,EAAE,0CAAE,KAAK,GAAG;IACrB,CAAC;;IA7Dc,oBAAS,GAAsB,IAAI,CAAC;IAD1C,UAAU;QADtB,OAAO;OACK,UAAU,CA+DtB;IAAD,iBAAC;CA/DD,AA+DC,IAAA;AA/DY,gCAAU;AAsEvB,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC","file":"","sourceRoot":"/","sourcesContent":["// 网络管理类 NetworkMgr.ts\nconst { ccclass } = cc._decorator;\n\n@ccclass\nexport class NetworkMsg {\n    private static _instance: NetworkMsg | null = null;\n    private ws: WebSocket | null = null;\n    private readonly RECONNECT_INTERVAL = 3000;\n\n\n    static getInst(): NetworkMsg {\n        if (!this._instance) {\n            this._instance = new NetworkMsg();\n        }\n        return this._instance;\n    }\n    // 连接配置\n    public connect(url: string) {\n        if (this.ws) this.close();\n        \n        this.ws = new WebSocket(url);\n        \n        this.ws.onopen = (event) => {\n            console.log(\"连接成功\", event);\n            // this.dispatchEvent(new Event('connected'));\n        };\n\n        this.ws.onmessage = (event) => {\n            try {\n                const data = JSON.parse(event.data);\n                console.log(\"消息  onmessage\", data);\n\n\n            } catch (e) {\n                console.error(\"消息解析失败\", e);\n            }\n        };\n\n        this.ws.onerror = (error) => {\n            console.error(\"连接错误\", error);\n            this.scheduleReconnect();\n        };\n\n        this.ws.onclose = (event) => {\n            console.log(\"连接关闭\", event);\n            // this.scheduleReconnect();\n        };\n    }\n\n    // 发送结构化数据\n    public send(data: object) {\n        if (this.ws?.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify({\n                protocol: 1.2,\n                timestamp: Date.now(),\n                ...data\n            }));\n        }\n    }\n\n    private scheduleReconnect() {\n        setTimeout(() => this.connect(this.ws?.url || \"\"), this.RECONNECT_INTERVAL);\n    }\n\n    public close() {\n        this.ws?.close();\n    }\n}\ndeclare global {\n    interface IC2F {\n        webSocket: NetworkMsg;\n    }\n}\n\nc2f.webSocket = NetworkMsg.getInst();\nexport { };"]}