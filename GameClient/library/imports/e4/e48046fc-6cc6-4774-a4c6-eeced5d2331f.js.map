{"version":3,"sources":["assets/c2f-framework/hack/ScrollViewHack.ts"],"names":[],"mappings":";;;;AAAA,+BAA+B;AAE/B,YAAY;AACZ,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,aAAa,GAAG,UAAU,KAAK,EAAE,gBAAgB;IACrE,IAAI,CAAC,IAAI,CAAC,kBAAkB;QAAE,OAAO;IACrC,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,gBAAgB,CAAC;QAAE,OAAO;IAE7D,IAAI,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IACxB,IAAI,IAAI,CAAC,OAAO,EAAE;QACd,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;KAChC;IACD,6CAA6C;IAC7C,IAAI,CAAC,IAAI,CAAC,iBAAiB,EAAE;QACzB,OAAO;KACV;IACD,IAAI,SAAS,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC;IAClE,sDAAsD;IACtD,IAAI,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;QACrB,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,KAAK,CAAC,MAAM,KAAK,IAAI,CAAC,IAAI,EAAE;YACjD,wCAAwC;YACxC,IAAI,WAAW,GAAG,IAAI,EAAE,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;YAC7E,WAAW,CAAC,IAAI,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC;YAClD,WAAW,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;YAChC,WAAW,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC;YAC/B,KAAK,CAAC,kBAAkB,GAAG,WAAW,CAAC;YACvC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;SAC3B;KACJ;IACD,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC,CAAC;AAC7C,CAAC,CAAC;AAGF,YAAY;AACZ,EAAE,CAAC,UAAU,CAAC,SAAS,CAAC,kBAAkB,GAAG,UAAU,KAAK,EAAE,gBAAgB;IAC1E,IAAI,KAAK,CAAC,UAAU,KAAK,EAAE,CAAC,KAAK,CAAC,eAAe;QAAE,OAAO;IAC1D,OAAO,KAAK,CAAC;AACjB,CAAC,CAAA","file":"","sourceRoot":"/","sourcesContent":["// 基于CocosCreator2.x 滚动组件hack代码\n\n//@ts-ignore\ncc.ScrollView.prototype._onTouchMoved = function (event, captureListeners) {\n    if (!this.enabledInHierarchy) return;\n    if (this.hasNestedViewGroup(event, captureListeners)) return;\n\n    let touch = event.touch;\n    if (this.content) {\n        this._handleMoveLogic(touch);\n    }\n    // Do not prevent touch events in inner nodes\n    if (!this.cancelInnerEvents) {\n        return;\n    }\n    let deltaMove = touch.getLocation().sub(touch.getStartLocation());\n    //FIXME: touch move delta should be calculated by DPI.\n    if (deltaMove.mag() > 7) {\n        if (!this._touchMoved && event.target !== this.node) {\n            // Simulate touch cancel for target node\n            let cancelEvent = new cc.Event.EventTouch(event.getTouches(), event.bubbles);\n            cancelEvent.type = cc.Node.EventType.TOUCH_CANCEL;\n            cancelEvent.touch = event.touch;\n            cancelEvent['simulate'] = true;\n            event.captureCancelEvent = cancelEvent;\n            this._touchMoved = true;\n        }\n    }\n    this._stopPropagationIfTargetIsMe(event);\n};\n\n\n//@ts-ignore\ncc.ScrollView.prototype.hasNestedViewGroup = function (event, captureListeners) {\n    if (event.eventPhase !== cc.Event.CAPTURING_PHASE) return;\n    return false;\n}"]}