{"version":3,"sources":["assets/c2f-framework/component/animation/DropResAnima.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["//掉落资源\nconst { ccclass, property, menu } = cc._decorator;\n@ccclass\n@menu('c2f/animation/DropResAnima')\nexport class DropResAnima extends cc.Component {\n\n    /** -----抛物掉落参数----- */\n    //掉落开关\n    private dropAnima: boolean = false;\n    //速度\n    private paraSpeed: cc.Vec2 = cc.v2(0, 0);\n    //加速度\n    private acc: number = -2000;\n    //抛物掉落时长\n    private usedTime: number = 0;\n    //抛物用时\n    private dropNeedTm: number = 0;\n    /** -----抛物掉落参数----- */\n\n    /** -----回收动画参数----- */\n    /**回收开关 */\n    private recycleAnima: boolean = false;\n    /** 移动速度 */\n    private moveSpeed: number = 1000;\n    /** 移动弧度 */\n    private recycleRad: number = 0;\n    /** 回收用时用时 */\n    private recyNeedTm: number = 0;\n    /** -----回收动画参数----- */\n\n    //完成回调\n    private completeCb: Function = null;\n    //回收位置\n    private recyclePos: cc.Vec3 = null;\n\n\n    protected start() {\n\n    }\n\n    protected onDestroy() {\n        this.completeCb = null;\n        this.recyclePos = null;\n        this.paraSpeed = null;\n    }\n\n    public setInfo(cmplCb: Function, endPos: cc.Vec3) {\n        this.completeCb = cmplCb;\n        this.recyclePos = endPos;\n        this.play();\n    }\n\n    private play() {\n        this.initParam();\n        let dur = Math.random();\n        cc.tween(this.node)\n            .delay(dur)\n            .call(() => {\n                this.dropAnima = true;\n            })\n            .start();\n    }\n\n    private initParam() {\n        let height = c2f.utils.math.randRectInt(50, 100);\n        let pos1 = this.node.getPosition();\n        let pos2 = cc.Vec3.ZERO.clone();\n        pos2.x = pos1.x + c2f.utils.math.randRectInt(-100, 100);\n        pos2.y = pos1.y + c2f.utils.math.randRectInt(-100, 100);\n        if (pos2.y < pos1.y) {\n            //目标点比起点低\n            let t1_a = Math.sqrt(-2 * height / this.acc);\n            let t2_a = Math.sqrt(-2 * (height + pos1.y - pos2.y) / this.acc);\n            this.paraSpeed.x = ((pos2.x - pos1.x) / (t1_a + t2_a)) || 0;\n            this.paraSpeed.y = (height / t1_a - 0.5 * this.acc * t1_a) || 0;\n            this.dropNeedTm = t1_a + t2_a;\n        } else {\n            //目标点比起点高\n            let t1_b = Math.sqrt(-2 * (height + pos2.y - pos1.y) / this.acc);\n            let t2_b = Math.sqrt(-2 * height / this.acc);\n            this.paraSpeed.x = ((pos2.x - pos1.x) / (t1_b + t2_b)) || 0;\n            this.paraSpeed.y = ((height + pos2.y - pos1.y) / t1_b - 0.5 * this.acc * t1_b) || 0;\n            this.dropNeedTm = t1_b + t2_b;\n        }\n\n        //回收弧度\n        let recycleAngle = c2f.utils.vec.angleEx(pos2, this.recyclePos);\n        this.recycleRad = recycleAngle * c2f.utils.math.deg2Rad;\n        this.recyNeedTm = cc.Vec3.distance(pos2, this.recyclePos) / this.moveSpeed;\n    }\n\n    protected update(dt: number) {\n        if (this.dropAnima) {\n            this.usedTime += dt;\n\n            let offsetX = this.paraSpeed.x * dt;\n            let curV = this.paraSpeed.y + this.acc * this.usedTime;\n            let offsetY = curV * dt + 0.5 * this.acc * dt * dt;\n            c2f.utils.node.offestNodePos(this.node, offsetX, offsetY, 0);\n\n            if (this.usedTime > this.dropNeedTm) {\n                this.dropAnima = false;\n                this.usedTime = 0// -Math.random();\n                this.recycleAnima = true;\n            }\n        }\n        if (this.recycleAnima) {\n            this.usedTime += dt;\n            if (this.usedTime > 0) {\n                let moveDisX = this.moveSpeed * Math.cos(this.recycleRad) * dt;\n                let moveDisY = this.moveSpeed * Math.sin(this.recycleRad) * dt;\n                c2f.utils.node.offestNodePos(this.node, moveDisX, moveDisY, 0);\n                if (this.usedTime > this.recyNeedTm) {\n                    this.recycleAnima = false;\n                    this.completeCb && this.completeCb();\n                }\n            }\n        }\n    }\n}\n"]}