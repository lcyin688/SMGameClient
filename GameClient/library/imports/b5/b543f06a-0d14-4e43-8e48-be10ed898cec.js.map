{"version":3,"sources":["assets/c2f-framework/net/ws/WSByProtobuf.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { msgname } from \"../../../resources/proto/msgname\";\nimport { SocketState, WebService } from \"./WebService\";\n\nexport class WSByProtobuf extends WebService {\n\n    protected messages: any;\n    protected root: any;\n    protected encryptCb: Function;    //消息加密回调\n    protected decryptCb: Function;    //消息解码回调\n\n    constructor() {\n        super();\n        this.messages = new Uint8Array(0);\n        this.root = undefined;\n    }\n\n    public setRoot(root: any) {\n        this.root = root;\n    }\n\n    /** 加密消息回调 */\n    public setEncryptCb(cb: Function) {\n        this.encryptCb = cb;\n    }\n\n    /** 解密消息回调 */\n    public setDecryptCb(cb: Function) {\n        this.decryptCb = cb;\n    }\n\n    /** 收到消息 */\n    protected onMessage(event: any) {\n        let response = new Uint8Array(event.data);\n        // this.decryptCb && this.decryptCb(response);\n\n        let newMsg = new Uint8Array(this.messages.length + response.length);\n        newMsg.set(this.messages, 0);\n        newMsg.set(response, this.messages.length);\n        this.messages = newMsg;\n\n        while (this.messages.length >= 8) {\n            let dv = new DataView(this.messages.buffer, this.messages.byteOffset, this.messages.byteLength);\n            let len = dv.getUint32(0, false);\n            let op = dv.getUint32(4, false);\n\n            if (len > this.messages.length) {\n                break;\n            }\n\n            let data = this.messages.subarray(8, len);\n            let opName = msgname[op];\n            if (!opName) {\n                cc.log(\"can not find op:\", op);\n                return;\n            }\n            let name = \"msg.\" + opName;\n            let proto = this.root.build(name);\n            if (!proto) {\n                cc.log(\"can not find proto:\", name);\n                return;\n            }\n            let rep = proto.decode(data);\n            // if (CC_DEV && op != msgid.GS_TimeSync_R) {\n            //     let noCpyIds = [msgid.GS_GetLoginData_R];\n            //     if (noCpyIds.indexOf(op) >= 0 || data.byteLength > 3000) {\n            //         cc.log(op, name, rep);\n            //     } else {\n            //         cc.log(op, name, Object.copyDepth(rep));\n            //     }\n            // }\n            this.messageCb && this.messageCb(op, rep);\n            //this.dispatchMsg(op, rep);\n            this.messages = this.messages.subarray(len);\n        }\n    }\n\n    /** 发送消息 */\n    public tcpSend(op: number, data: any) {\n        // if (this.socket.readyState === WebSocket.OPEN) {\n        //     this.socket.send(data);\n        // }\n        if (this.state !== SocketState.Connected) {\n            return false;\n        }\n        if (!this.socket || this.socket.readyState != WebSocket.OPEN) {\n            return false;\n        }\n        const msgName = msgname[op];\n        if (!msgName) {\n            cc.warn(`don't find msg for id:${op}`);\n            return false;\n        }\n\n        // if (CC_DEV && op != msgid.C_TimeSync) {\n        //     cc.log(\"network.tcpSend msgid = \" + op);\n        //     cc.log(Object.copyDepth(data));\n        // }\n\n        let name = \"msg.\" + msgName;\n        let message = this.root.build(name);\n        let msg = new message();\n        for (const p in data) {\n            if (data.hasOwnProperty(p)) {\n                msg.set(p, data[p], false);\n            }\n        }\n        let bytes = new Uint8Array(msg.encode().toBuffer());\n        let buffer = new ArrayBuffer(bytes.byteLength + 8);\n        let dv = new DataView(buffer);\n        dv.setUint32(0, bytes.byteLength + 8, false);\n        dv.setUint32(4, op, false);\n        for (var i = 0, length = bytes.byteLength; i < length; i++) {\n            dv.setUint8(i + 8, bytes[i]);\n        }\n        let content = new Uint8Array(buffer);\n        this.encryptCb && this.encryptCb(content);\n        this.socket.send(content.buffer);\n\n        return true;\n    }\n}"]}