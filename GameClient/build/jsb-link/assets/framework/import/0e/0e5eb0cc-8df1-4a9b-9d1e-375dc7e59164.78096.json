[1,0,0,[["cc.EffectAsset",["_name","shaders","techniques"],0]],[[0,0,1,2,4]],[[0,"cyclicRolling",[{"hash":3357862590,"record":null,"name":"cyclicRolling|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_DYNAMIC\nuniform global{\n  float moveSpeed;\n  float anchorX;\n  float showWidth;\n  float curTick;\n};\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 a_color = v_color;\n  #if USE_TEXTURE\n      vec2 uv = v_uv0;\n      #if USE_DYNAMIC\n          if (showWidth < 1.0) {\n            float showPosL = (1.0-showWidth) * anchorX;\n            float showPosR = showPosL + showWidth;\n            float fixOff = 0.1;\n            float realSpeed = (1.0-showWidth) / 3.0;\n            float offset = mod(curTick * 0.2 / moveSpeed , 1.0) - (showPosL + fixOff);\n            uv.x = uv.x + offset;\n            if (uv.x < showPosL + offset || uv.x > showPosR + offset || uv.x > 1.0 || uv.x < 0.0) {\n              a_color.a = 0.0;\n            }\n          }\n        #endif\n        o*=texture(texture,uv);\n  #endif\n  o *= a_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n#if USE_DYNAMIC\nuniform float moveSpeed;\nuniform float anchorX;\nuniform float showWidth;\nuniform float curTick;\n#endif\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  vec4 a_color = v_color;\n  #if USE_TEXTURE\n      vec2 uv = v_uv0;\n      #if USE_DYNAMIC\n          if (showWidth < 1.0) {\n            float showPosL = (1.0-showWidth) * anchorX;\n            float showPosR = showPosL + showWidth;\n            float fixOff = 0.1;\n            float realSpeed = (1.0-showWidth) / 3.0;\n            float offset = mod(curTick * 0.2 / moveSpeed , 1.0) - (showPosL + fixOff);\n            uv.x = uv.x + offset;\n            if (uv.x < showPosL + offset || uv.x > showPosR + offset || uv.x > 1.0 || uv.x < 0.0) {\n              a_color.a = 0.0;\n            }\n          }\n        #endif\n        o*=texture2D(texture,uv);\n  #endif\n  o *= a_color;\n  ALPHA_TEST(o);\n  gl_FragColor = o;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_DYNAMIC","type":"boolean","defines":[]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"global","binding":1,"members":[{"name":"moveSpeed","type":13,"count":1},{"name":"anchorX","type":13,"count":1},{"name":"showWidth","type":13,"count":1},{"name":"curTick","type":13,"count":1}],"defines":["USE_DYNAMIC"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"cyclicRolling|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"moveSpeed":{"type":13,"value":[0.2]},"anchorX":{"type":13,"value":[0.5]},"showWidth":{"type":13,"value":[0.5]},"curTick":{"type":13,"value":[1]}}}]}]]],0,0,[],[],[]]