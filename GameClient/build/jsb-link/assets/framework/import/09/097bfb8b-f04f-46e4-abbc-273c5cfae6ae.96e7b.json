[1,0,0,[["cc.TextAsset",["_name","text"],1]],[[0,0,1,3]],[[0,"c2f.d","//框架定义\ndeclare namespace jsb {\n    export var Device: any;\n}\n\ndeclare namespace cc {\n    export var nativeSDK: any;\n}\n\ninterface String {\n    /** 字符串格式化{ 0 }, { 1 } */\n    format(...param): string;\n    /** 首字母大写 */\n    capWord(): string;\n    /** 去除换行 */\n    clearBr(): string;\n    /** 去除空格 */\n    trimAll(): string;\n}\n\ninterface Date {\n    /**\n     * 日期转字符串\n     * 格式 YYYY-MM-DD hh:mm:ss\n     */\n    dateToString(): string;\n\n    /**\n     * \n     *  日期格式化\n     * 格式 YYYY/yyyy/YY/yy 表示年份\n     * MM/M 月份\n     * W/w 星期\n     * dd/DD/d/D 日期\n     * hh/HH/h/H 时间\n     * mm/m 分钟\n     * ss/SS/s/S 秒\n     */\n    format(formatStr: string): string;\n}\n\ninterface ObjectConstructor {\n    /** 对象key首字母大写 */\n    firstBig(obj: Object): Object;\n    /** 合并两个对象 */\n    merge(sub1: Object, sub2: Object): Object;\n    /** 深度拷贝 */\n    copyDepth(src: T): T;\n    /** 是否为空 */\n    isEmpty(obj: Object): boolean;\n    /** 成员个数 */\n    count(obj: Object): number;\n\n}\n\ndeclare namespace cc {\n    interface Sprite {\n        /**\n         * 动态修改Sprite的spriteFrame：便于动态加载资源的管理\n         * 源码见：.\\assets\\c2f-framework\\hack\\SpriteHack.ts   \n        */\n        changeSpriteFrame(url: string, endCb: Function): void;\n        /** 通过图集更改sprite的spriteFrame */\n        changeSFWithAtlas(url: string, subFile: string, endCb: Function): void;\n    }\n\n    interface ToggleContainer {\n        /** 仅刷新其内部toggle显示状态·不激发事件 */\n        updateTogglesUIStateOnly(selectName: string): void\n    }\n}\n\ndeclare module sp {\n    interface Skeleton {\n        /**\n         * 动态修改Spine的skeletonData：便于动态加载资源的管理\n         * 源码见：.\\assets\\c2f-framework\\hack\\SpineHack.ts\n         * @param url \n         * @param endCb \n         */\n        changeSkeletonData(url: string, endCb: Function): void;\n    }\n}\n\ndeclare namespace jsb {\n    export module reflection {\n        /**\n         * https://docs.cocos.com/creator/manual/zh/advanced-topics/java-reflection.html\n         * call OBJC/Java static methods\n         * \n         * @param className \n         * @param methodName \n         * @param methodSignature JAVA需要这个参数，IOS不需要\n         * @param parameters \n         */\n        export function callStaticMethod(className: string, methodName: string, methodSignature: string = null, ...parameters: any): any;\n    }\n}\n\n/**@description 提示弹出框配置 */\ndeclare interface AlertConfig {\n    /**@description 用来标识弹出框，后面可指定tag进行关闭所有相同tag的弹出框 */\n    tag?: string | number,\n    text?: string,\n    /**@description 标题,默认为 : 提示 */\n    title?: string,\n    /**@description 确定按钮文字 默认为 : 确定*/\n    confirmString?: string,\n    /**@description 取消按钮文字 默认为 : 取消*/\n    cancelString?: string,\n    /**@description 确定按钮回调 有回调则显示按钮，无回调则不显示*/\n    confirmCb?: (isOK: boolean) => void,\n    /**@description 取消按钮回调 有回调则显示按钮，无回调则不显示*/\n    cancelCb?: (isOK: boolean) => void,\n    /**@description 富文件显示内容 跟text只能二选1 */\n    richText?: string,\n    /**@description true 回调后在关闭弹出 false 关闭弹出框在回调 默认为 : false */\n    immediatelyCallback?: boolean,\n    /**@description 是否允许该tag的弹出框重复弹出，默认为true 会弹出同类型的多个 */\n    isRepeat?: boolean,\n    /**@description 用户自定义数据 */\n    userData?: any,\n}\n"]],0,0,[],[],[]]